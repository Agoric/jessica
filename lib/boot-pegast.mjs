// This file is hand-written, to allow boostrapping the
// quasi-peg.mjs grammar.

// It is validated in boot-env.mjs by comparing its output to
// that of the parser generated by boot-peg.mjs.

const def = (rule, ...arms) => ['def', rule, or(...arms)];
const or = (...arms) => ['or', ...arms];
const seq = (...args) => ['seq', ...args];
const act = (hole) => ['act', hole];
const lit = (str) => ['lit', str];
const pred = (hole) => ['pred', hole];
const cls = (range) => ['cls', range];
const peekNot = (pri) => ['peekNot', pri];
const many = (pri) => ['+', pri];
const zeroOrOne = (pri) => ['?', pri];
const zeroOrMany = (pri) => ['*', pri];
const begin = ['begin'];
const end = ['end'];
const dot = ['dot'];
const separated = (patt, sep) => ['**', patt, sep];

export default [
  def('Grammar',
    seq('Spacing', many('Definition'), 'EndOfFile', act(0))),
  def('Definition',
    seq('Identifier', 'LEFTARROW', 'Expression', 'SEMI', pred(1), act(2))),
  def('Expression',
    seq(separated('Sequence', 'SLASH'), act(3))),
  def('Sequence', seq(separated('Prefix', lit('')), act(4))),
  def('Prefix',
    seq('AND', 'Action', act(5)),
    seq('AND', 'Suffix', act(6)),
    seq('NOT', 'Suffix', act(7)),
    seq('Suffix')),
  def('Suffix',
    seq('Primary', or(seq('STARSTAR'), seq('PLUSPLUS')),
      'Primary', act(8)),
    seq('Primary',
      or(seq('QUESTION'),
        seq('STAR'),
        seq('PLUS')),
      act(9)),
    seq('Primary')),
  def('Primary',
    seq('Super', act(10)),
    seq('Identifier', peekNot('LEFTARROW')),
    seq('OPEN', 'Expression', 'CLOSE'),
    seq('Literal', act(11)),
    seq('Class', act(12)),
    seq('DOT', act(13)),
    seq('Action', act(14)),
    seq('BEGIN', act(15)),
    seq('END', act(16))),
  def('Identifier',
    seq(begin, 'IdentStart', zeroOrMany('IdentCont'), end, 'Spacing')),
  def('IdentStart',
    seq(cls('a-zA-Z_'))),
  def('IdentCont',
    seq('IdentStart'),
    seq(cls('0-9'))),
  def('Literal',
    seq(cls("'"), begin,
      zeroOrMany(or(seq(peekNot(cls("'"))))),
      end, cls("'"), 'Spacing'),
    seq(cls('"'), begin,
      zeroOrMany(or(seq(peekNot(cls('"'))))),
      end, cls("'"), 'Spacing')),
  def('Class',
    seq(lit('['), begin,
      zeroOrMany(or(seq(peekNot(lit(']'))), 'Range')),
      end, lit(']'), 'Spacing')),
  def('Range',
    seq('Char', lit('-'), 'Char'),
    seq('Char')),
  def('Char',
    seq(lit('\\'), cls("abefnrtv'" + '"[]\\')),
    seq(lit('\\'), cls('0-3'), cls('0-7'), cls('0-7')),
    seq(lit('\\'), cls('0-7'), zeroOrOne(cls('0-7'))),
    seq(lit('\\'), lit('-')),
    seq(peekNot(lit('\\')), dot)),
  def('LEFTARROW', seq(lit('->'), 'Spacing')),
  def('SLASH', seq(lit('/'), 'Spacing')),
  def('SEMI', seq(lit(';'), 'Spacing')),
  def('AND', seq(lit('&'), 'Spacing')),
  def('NOT', seq(lit('~'), 'Spacing')),
  def('QUESTION', seq(lit('?'), 'Spacing')),
  def('STAR', seq(lit('*'), 'Spacing')),
  def('PLUS', seq(lit('+'), 'Spacing')),
  def('OPEN', seq(lit('('), 'Spacing')),
  def('CLOSE', seq(lit(')'), 'Spacing')),
  def('DOT', seq(lit('.'), 'Spacing')),
  def('Spacing',
    seq(zeroOrMany(or(seq('Space'), seq('Comment'))))),
  def('Comment',
    seq(lit('#'),
      zeroOrMany(or(seq(peekNot('EndOfLine'), dot)),
      'EndOfLine'))),
  def('EndOfLine',
    seq(lit('\r\n')),
    seq(lit('\n')),
    seq(lit('\r'))),
  def('EndOfFile',
    seq(peekNot(dot))),
  def('Action',
    seq(pred(17), 'Spacing')),
  def('Super',
    seq(lit('super.'), begin, 'Identifier', end)),
  def('BEGIN',
    seq(lit('<'), 'Spacing')),
  def('END',
    seq(lit('>'), 'Spacing')),
  def('PLUSPLUS',
    seq(lit('++'), 'Spacing')),
  def('STARSTAR',
    seq(lit('**'), 'Spacing')),
];