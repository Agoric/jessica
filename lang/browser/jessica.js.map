{"version":3,"sources":["../nodejs/sesshim.mjs","../../lib/immunize.mjs","../../lib/slog.mjs","node_modules/process/browser.js","../nodejs/globalEnv.mjs","../../lib/indent.mjs","../../lib/boot-peg.mjs","../../lib/boot-pegast.mjs","../../lib/quasi-peg.mjs","../../lib/quasi-jessie.mjs","../../lib/quasi-json.mjs","../../lib/quasi-utils.mjs","../../lib/quasi-justin.mjs","../../lib/tag-string.mjs","../../lib/index.mjs","jessica.mjs"],"names":["global","harden","Object","freeze","confine","exprSrc","env","names","getOwnPropertyNames","closedFuncSrc","join","encodeURIComponent","slice","closedFunc","eval","map","n","immunize","window","makeImmunize","makeHarden","makeWrapper","setComputedIndex","immunizeHardener","tryWrapMethods","obj","entries","key","value","wrapped","wrap","e","_wrapperMap","makeWeakMap","fn","wrapper","get","newImmunize","set","root","wrapRoot","makeSlog","handler","levels","makeMap","doit","level","name","tag","contextOrTemplate","context","raw","t","a","args","template","i","slog","panic","alert","crit","error","reject","warn","notice","info","debug","trace","cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","Array","arguments","push","prototype","apply","title","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","globalEnv","applyMethod","thisObj","method","index","val","ret","iargs","ithis","prepareObject","hardMap","WeakMap","newHarden","type","has","frozen","values","Map","makeSet","Set","makePromise","executor","Promise","makeWeakSet","WeakSet","keys","forEach","vname","contextArg","undefined","valname","JSON","stringify","oval","mySlog","ca","reduced","reduce","prior","last","trimRight","trimLeft","String","console","at0","stack","at1","indexOf","at2","at3","exitCode","indent","substs","result","newnewline","ilen","segment","startsWith","lastnl","lastIndexOf","j","split","subst","$i_indent","LEFT_RECUR","toString","RUN","self","ruleOrPatt","pos","_debug","posm","_memo","_hits","_misses","EAT","lastFailures","maxPos","fails","posArr","fail","newPos","FAIL","ERROR","_pos","found","FIND","tokStr","isArray","makeTokStr","failStr","sources","r","s","uri","line","DONE","v","numSubs","relpos","segnum","seglen","ACCEPT","_self","str","HOLE","SKIP","lHexDigits","uHexDigits","hexDigit","c","unescape","cs","q","ord","fromCharCode","bootPeg","makePeg","bootPegAst","compile","sexp","alphaCount","vars","nextVar","prefix","nextLabel","vtable","peg","rules","rulesSrc","peval","paramSrcs","def","body","bodySrc","empty","or","choices","labelSrc","choicesSrc","cSrc","seq","terms","posSrc","sSrc","vSrc","termsSrc","termSrc","pred","hole","Math","max","val0","act","patt","sep","startSrc","pattSrc","sepSrc","sepValSrc","starSrc","super","ident","begin","end","cls","classStr","invert","c2","min","charCodeAt","k","op","srcCs","dot","lit","peek","peekNot","expr","nameStr","quasifyParser","parserCreator","quasiMemo","quasiCurry","wm","templateTag","templateOrFlag","quasiRest","subs","baseCurry","parser","pair","start","done","defaultBaseGrammar","_template","metaCompile","baseRules","baseAST","parserTraitMakerSrc","makeParserTrait","parserTrait","_asExtending","quasiParser","ext","baseQuasiParser","tag0","flags","tmplOrFlag","boundParser","parserBase","p","flag","extends","pegTag","closedDefaultBaseGrammar","actionExtractorTag","actions","bootPegActions","bootPegTag","astExtractorTag","defs","reparsedPegAst","b","finalPegTag","simple","list","flatArgs","flatSeq","term","kind","_","_2","optHole","optQ","terminatedBlock","manyBodies","bs","makeJessie","justinPeg","jessieTag","_3","id","lv","rv","pe","_4","label","stat","f","o","d","_5","decls","ps","parse","h","tb","pfx","fname","d2","makeJSON","es","js","qunpack","ms","qrepack","parts","argExprs","reduceElisions","$i_qunpack","binary","left","rights","prev","transformSingleQuote","qs","makeJustin","u","x","y","tagString","tagged","cooked","cooked0","raw0","sources0","byte","column","tmpl","$i_bootPeg","$i_bootPegAst","$i_makePeg","$i_makeJessie","$i_makeJSON","$i_makeJustin","$i_tagString","jsonTag","justinTag","translate","sourceText","parameters","resolve","sourceURL","translatedText"],"mappings":"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B9G,KAAOA,GAGpBgH,IAAAA,EAAiBrG,EAAQmG,EAAoBpB,GAI7CuB,EADcvB,EAAY9E,GACb,WAAeoG,EAAAA,EAAAA,IAG5BE,EAAkBvG,EACxBsG,EAAY,SAAAE,GAAQ,OAAA,WAAUA,OAAAA,KACxBC,EAAiBzG,EAAQuG,OAAiB/L,GAK1ClG,EAAIoG,KAAKC,UAAUsF,OAAYzF,EAAW,MAC1CkM,EAAIhM,KAAKC,UAAU8L,OAAgBjM,EAAW,MAQ7CmM,OAPHrS,IAAMoS,IACRhS,KAAKQ,KAA0F,IAAA,CAAEwR,EAAAA,IACjGhS,KAAKC,MAAL,MAIkBqL,EAAQsG,EAAYvB,KAI3B7S,GAAAA,SAAS6N,IAAD,QAAA,QAAA;;AC9sBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAR7N,IAAAA,EAAAA,SAAS,CACxB,CACA,MACA,UACA,CACA,MACA,EACA,WACA,CACA,IACA,cAEA,eAGA,CACA,MACA,aACA,CACA,MACA,EACA,aACA,YACA,aACA,OACA,CACA,OACA,KAIA,CACA,MACA,aACA,CACA,MACA,EACA,CACA,KACA,WACA,YAIA,CACA,MACA,WACA,CACA,MACA,EACA,CACA,MACA,EACA,CACA,IACA,WAGA,CACA,IACA,UAIA,CACA,MACA,SACA,CACA,KACA,CACA,MACA,EACA,MACA,QAEA,CACA,MACA,EACA,MACA,UAEA,CACA,MACA,EACA,MACA,UAEA,CACA,OACA,YAIA,CACA,MACA,SACA,CACA,KACA,CACA,MACA,EACA,UACA,CACA,KACA,CACA,OACA,YAEA,CACA,OACA,aAGA,WAEA,CACA,MACA,GACA,UACA,CACA,KACA,CACA,OACA,YAEA,CACA,OACA,QAEA,CACA,OACA,UAIA,CACA,OACA,aAIA,CACA,MACA,UACA,CACA,KACA,CACA,OACA,SAEA,CACA,OACA,aACA,CACA,UACA,cAGA,CACA,MACA,GACA,OACA,aACA,SAEA,CACA,MACA,GACA,WAEA,CACA,MACA,GACA,SAEA,CACA,MACA,GACA,OAEA,CACA,MACA,GACA,SAEA,CACA,MACA,GACA,SAIA,CACA,MACA,QACA,CACA,MACA,GACA,CACA,MACA,UAEA,eAGA,CACA,MACA,aACA,CACA,OACA,CACA,SAEA,aACA,CACA,IACA,aAEA,CACA,OAEA,aAGA,CACA,MACA,aACA,CACA,OACA,CACA,MACA,aAIA,CACA,MACA,YACA,CACA,KACA,CACA,OACA,cAEA,CACA,OACA,CACA,MACA,UAKA,CACA,MACA,UACA,CACA,KACA,CACA,OACA,CACA,MACA,KAEA,CACA,SAEA,CACA,IACA,CACA,OACA,CACA,UACA,CACA,MACA,MAGA,SAGA,CACA,OAEA,CACA,MACA,KAEA,YAEA,CACA,OACA,CACA,MACA,KAEA,CACA,SAEA,CACA,IACA,CACA,OACA,CACA,UACA,CACA,MACA,MAGA,SAGA,CACA,OAEA,CACA,MACA,KAEA,cAIA,CACA,MACA,QACA,CACA,OACA,CACA,MACA,KAEA,CACA,SAEA,CACA,IACA,CACA,OACA,CACA,UACA,CACA,MACA,MAGA,UAGA,CACA,OAEA,CACA,MACA,KAEA,aAGA,CACA,MACA,QACA,CACA,KACA,CACA,OACA,OACA,CACA,MACA,KAEA,QAEA,CACA,OACA,UAIA,CACA,MACA,OACA,CACA,KACA,CACA,OACA,CACA,MACA,QAEA,CACA,MACA,gCAGA,CACA,OACA,CACA,MACA,SAEA,CACA,MACA,aAEA,CACA,MACA,cAGA,CACA,OACA,CACA,MACA,QAEA,CACA,MACA,MAGA,CACA,OACA,CACA,UACA,CACA,MACA,SAGA,CACA,UAKA,CACA,MACA,YACA,CACA,OACA,CACA,MACA,MAEA,aAGA,CACA,MACA,SACA,CACA,MACA,GACA,CACA,MACA,KAEA,aAGA,CACA,MACA,OACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,MACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,MACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,WACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,OACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,OACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,OACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,QACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,MACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,WACA,CACA,MACA,GACA,CACA,IACA,CACA,KACA,CACA,OACA,SAEA,CACA,OACA,eAMA,CACA,MACA,UACA,CACA,OACA,CACA,MACA,KAEA,CACA,IACA,CACA,OACA,CACA,UACA,aAEA,CACA,SAIA,cAGA,CACA,MACA,QACA,CACA,KACA,CACA,OACA,CACA,MACA,MAGA,CACA,OACA,CACA,MACA,QAGA,CACA,OACA,eAIA,CACA,MACA,YACA,CACA,KACA,CACA,OACA,CACA,MACA,WAGA,CACA,OACA,CACA,MACA,QAGA,CACA,OACA,CACA,MACA,UAKA,CACA,MACA,aACA,CACA,OACA,CACA,UACA,CACA,UAKA,CACA,MACA,OACA,CACA,OACA,CACA,OACA,IAEA,aAGA,CACA,MACA,QACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,MACA,CACA,OACA,CACA,MACA,KAEA,aAGA,CACA,MACA,WACA,CACA,OACA,CACA,MACA,MAEA,aAGA,CACA,MACA,WACA,CACA,OACA,CACA,MACA,MAEA,eApuBuB,QAAA,QAAA;;AC6IA,aAAA,SAAA,IAAA,IAAA,EAAA,EAAA,CAAA,mGAAA,8DAAA,yBAAA,8DAAA,oDAAA,kDAAA,oDAAA,qDAAA,qDAAA,sIAAA,6HAAA,wJAAA,kDAAA,gDAAA,8CAAA,gDAAA,8CAAA,iFAAA,ijBAAA,wUAAA,+KAAA,8IAAA,CAAA,mGAAA,8DAAA,yBAAA,8DAAA,oDAAA,kDAAA,oDAAA,qDAAA,qDAAA,sIAAA,6HAAA,wJAAA,kDAAA,gDAAA,8CAAA,gDAAA,8CAAA,iFAAA,mkBAAA,wUAAA,oLAAA,+IAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA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","file":"jessica.js","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * By requiring sesshim.js, if you are not already in a SES\n * environment, you obtain a trivial polyfil of a small bit of SES's\n * API with none of its security. At the moment, you get only\n * <tt>def</tt> and <tt>confine</tt>, but with little of their\n * functionality. More API and more functionality will be provided on\n * an as-needed basis by my current uses, though I will try not to\n * break old clients that were compatible with both SES and\n * sesshim.js.\n *\n * <p>Currently, even if you are already in a SES environment,\n * sesshim.js will ignore that and do the same thing. Once actual SES\n * works on node/iojs/ES6, sesshim.js should test if it is in such an\n * environment, and re-export SES's versions of the APIs that\n * sesshim.js does provide, or wrappings that adapt them to ES6.\n */\n((global) => {\n    /**\n     * The faux version of SES's <tt>harden</tt> is currently just a\n     * synonym for Object.freeze.\n     */\n    const harden = Object.freeze;\n    /**\n     * The faux version of SES's <tt>confine</tt> evals an\n     * expression in an environment consisting of the global environment\n     * as enhanced and shadowed by the own properties of the\n     * <tt>env</tt> object. Unlike real <tt>confine</tt>, <ul>\n     * <li>The faux <tt>confine</tt> does not have a third\n     *     <tt>opt_options</tt> parameter. An options argument can of\n     *     course be provided by the caller, but it will be ignored.\n     * <li>The expression can be in the subset of ES6 supported by\n     *     Babel.\n     * <li>All dangerous globals that are not shadowed, such as \"window\"\n     *     or \"document\", are still accessible by the evaled expression.\n     * <li>The current binding of these properties at the time that\n     *     <tt>confine</tt> is called are used as the initial\n     *     bindings. Further changes to either the properties or the\n     *     bindings are not tracked by the other.\n     * <li>In the evaled expression, <tt>this</tt> is bound to\n     *     <tt>undefined</tt>.\n     * </ul>\n     * When sesshim.js is enhanced to use SES if present, this confine\n     * should wrap SES's confine rather than export it directly, in\n     * order to continue to support ES6 expressions.\n     */\n    function confine(exprSrc, env) {\n        exprSrc = '' + exprSrc;\n        const names = Object.getOwnPropertyNames(env);\n        // Note: no newline prior to ${exprSrc}, so that line numbers for\n        // errors within exprSrc are accurate. Column numbers on the first\n        // line won't be, but will on following lines.\n        const closedFuncSrc = `(function(${names.join(',')}) { \"use strict\"; return (${exprSrc}\n  );\n})\n//# sourceURL=data:${encodeURIComponent(exprSrc).slice(0, 48)}...\n`;\n        // tslint:disable-next-line:no-unused-expression\n        const closedFunc = (1, eval)(closedFuncSrc);\n        return closedFunc(...names.map(n => env[n]));\n    }\n    // FIXME: For Jessie support we don't export harden.\n    // global.harden = harden(harden);\n    global.confine = harden(confine);\n    // For Jessie support.\n    global.immunize = harden(harden);\n})(typeof window === 'undefined' ? global : window);\n","// DO NOT EDIT - Generated automatically from immunize.mjs.ts by tessc\n// Create an `immunize` function for use in Jessie endowments.\n//\n// Recursively freeze the root, a la harden.  If it is a function\n// or contains a reachable property that is an function, that\n// function will be replaced by a memoized hardened wrapper that\n// immunizes its argumens, return value, and any thrown exception.\n//\n// A baroque Proxy or frozen object cannot be immunized, but will still be\n// hardened.  These are objects that cannot possibly contain mutable Jessie\n// objects (since all Jessie objects have been immunized before export), so\n// this incompleteness does not compromise Jessie.\n\n\nconst makeImmunize = immunize((\nmakeHarden,\nmakeWrapper,\nsetComputedIndex) => {\n\n  // Create a hardener that attempts to immunize functions on the way.\n  const immunizeHardener = makeHarden(tryWrapMethods);\n  function tryWrapMethods(obj) {\n    // Just do a best-effort immunizing the object's methods.\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value !== 'function') {\n        continue;\n      }\n      const wrapped = wrap(value);\n      try {\n        // This means: obj[key] = wrapper;\n        setComputedIndex(obj, key, wrapped);\n      } catch (e) {\n        // obj is a Proxy, or frozen object that blocked\n        // our attempt to set its property.\n\n        // It can't have originated from Jessie, so this is an\n        // endowment or primitive from the parent environment\n        // which wasn't added to harden's initialFringe.\n\n        // We go on, as a best-effort attempt to try immunizing the\n        // properties we can.\n        continue;\n      }\n    }\n  }\n\n  const _wrapperMap = makeWeakMap();\n\n  // FIXME: Needed for bootstrap.\n  _wrapperMap.set(setComputedIndex, setComputedIndex);\n\n  function wrap(fn) {\n    let wrapper = _wrapperMap.get(fn);\n    if (!wrapper) {\n      wrapper = makeWrapper(newImmunize, fn);\n\n      // Memoize our results.\n      _wrapperMap.set(fn, wrapper);\n      _wrapperMap.set(wrapper, wrapper);\n\n      // Copy in the wrapped function's properties (if any).\n      // These are immunized in the next traversal.\n      for (const [key, value] of Object.entries(fn)) {\n        setComputedIndex(wrapper, key, value);\n      }\n    }\n    return wrapper;\n  }\n\n  function newImmunize(root) {\n    // We may need to wrap the root before immunizing its children.\n    if (typeof root === 'function') {\n      const wrapRoot = wrap(root);\n      return immunizeHardener(wrapRoot);\n    }\n    return immunizeHardener(root);\n  }\n\n  return newImmunize;\n});\n\nexport default immunize(makeImmunize);","// DO NOT EDIT - Generated automatically from slog.mjs.ts by tessc\n\n\n\n\n\n\nconst makeSlog = immunize(handler => {\n  const levels = makeMap();\n  const names = [];\n  const doit = (level, name) => {\n    if (level >= 0) {\n      names[level] = name;\n      levels.set(name, level);\n    }\n\n\n    function tag(contextOrTemplate, ...args) {\n      let context;\n      if (!contextOrTemplate.raw) {\n        context = makeMap([...Object.entries(contextOrTemplate)]);\n        return (t, ...a) =>\n        handler(level, names, levels, context, t, a);\n      }\n      // No specified context, this is the template tag.\n      context = makeMap();\n      const template = contextOrTemplate;\n      return handler(level, names, levels, context, template, args);\n    }\n    return tag;\n  };\n\n  let i = 0;\n  const slog = doit(-1, 'stringify');\n  slog.panic = doit(i++, 'panic');\n  slog.alert = doit(i++, 'alert');\n  slog.crit = doit(i++, 'crit');\n  slog.error = doit(i++, 'error');\n  slog.reject = doit(i++, 'reject');\n  slog.warn = doit(i++, 'warn');\n  slog.notice = doit(i++, 'notice');\n  slog.info = doit(i++, 'info');\n  slog.debug = doit(i++, 'debug');\n  slog.trace = doit(i++, 'trace');\n  return slog;\n});\n\nexport default immunize(makeSlog);","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// We set global variables to emulate a Jessie environment in a\n// vanilla Node.js script.  This allows us to import modules directly\n// if they are written in Jessie (as all the jessica/ directory is).\n//\n// NOTE: Don't ever do this in a library module, it's only allowed when\n// we are a main program, and we're changing global state for the\n// entire process.\n/// <reference path=\"../../typings/ses.d.ts\"/>\n/// <reference path=\"node_modules/@types/node/ts3.1/index.d.ts\"/>\nimport './sesshim.mjs';\nconst globalEnv = {};\nglobalEnv.confine = confine;\nexport const applyMethod = Object.freeze((thisObj, method, args) => method.apply(thisObj, args));\nexport const setComputedIndex = Object.freeze((obj, index, val) => {\n    if (index === '__proto__') {\n        slog.error `Cannot set ${{ index }} object member`;\n    }\n    return obj[index] = val;\n});\nexport const makeWrapper = Object.freeze((newImmunize, fn) => function wrapper(...args) {\n    let ret;\n    try {\n        // Immunize `this` and arguments before calling.\n        const iargs = args.map(newImmunize);\n        const ithis = newImmunize(this);\n        ret = fn.apply(ithis, iargs);\n    }\n    catch (e) {\n        // Immunize exception, and rethrow.\n        throw newImmunize(e);\n    }\n    // Immunize return value.\n    return newImmunize(ret);\n});\n// TODO: Need to use @agoric/make-hardener.\nconst makeHarden = (prepareObject) => {\n    const hardMap = new WeakMap();\n    // FIXME: Needed for bootstrap.\n    hardMap.set(setComputedIndex, setComputedIndex);\n    if (typeof window !== 'undefined') {\n        hardMap.set(window, window);\n    }\n    function newHarden(root) {\n        if (root === null) {\n            return root;\n        }\n        const type = typeof root;\n        if (type !== 'object' && type !== 'function') {\n            return root;\n        }\n        if (hardMap.has(root)) {\n            return hardMap.get(root);\n        }\n        prepareObject(root);\n        const frozen = Object.freeze(root);\n        hardMap.set(root, frozen);\n        for (const value of Object.values(root)) {\n            newHarden(value);\n        }\n        return frozen;\n    }\n    return newHarden;\n};\nimport makeImmunize from '../../lib/immunize.mjs';\n// Need makeWeakMap for makeImmunize.\nglobal.makeWeakMap = Object.freeze((...args) => Object.freeze(new WeakMap(...args)));\nconst immunize = makeImmunize(makeHarden, makeWrapper, setComputedIndex);\nglobalEnv.immunize = immunize;\nglobalEnv.makeMap = immunize((...args) => new Map(...args));\nglobalEnv.makeSet = immunize((...args) => new Set(...args));\nglobalEnv.makePromise = immunize((executor) => new Promise(executor));\nglobalEnv.makeWeakMap = immunize((...args) => new WeakMap(...args));\nglobalEnv.makeWeakSet = immunize((...args) => new WeakSet(...args));\n// Export the bootstrapped primitives.\nObject.keys(globalEnv).forEach(vname => {\n    global[vname] = globalEnv[vname];\n});\n// slog writes to console\nimport makeSlog from '../../lib/slog.mjs';\nconst contextArg = (context, a) => {\n    if (typeof a !== 'object' || a === null) {\n        // Just stringify the argument.\n        return '' + a;\n    }\n    else if (a.length !== undefined) {\n        // Take the value as the (anonymous) array.\n        return a;\n    }\n    // Deconstruct the argument object.\n    let valname, val;\n    for (const vname of Object.keys(a)) {\n        if (vname === 'format') {\n            // format = a[vname];\n        }\n        else if (valname !== undefined || typeof a[vname] === 'function') {\n            // Too many members or seems to be an active object.\n            return a;\n        }\n        else {\n            // We have at least one non-format member.\n            valname = vname;\n            val = JSON.stringify(a[vname], undefined, 2);\n        }\n    }\n    if (valname === undefined) {\n        // No non-format arguments.\n        return a;\n    }\n    if (valname[0] === '_') {\n        // Do nothing.\n    }\n    else if (context.has(valname)) {\n        const oval = context.get(valname);\n        if (val !== oval) {\n            slog.error `Context value ${{ valname }} mismatch: ${{ val }} vs. ${{ oval }}`;\n        }\n    }\n    else {\n        context.set(valname, val);\n    }\n    return val;\n};\n// Create a logger.\nconst mySlog = makeSlog((level, names, levels, context, template, args) => {\n    let ca;\n    const reduced = args.reduce((prior, a, i) => {\n        ca = contextArg(context, a);\n        const last = prior[prior.length - 1];\n        if (typeof ca === 'object' && ca !== undefined) {\n            prior[prior.length - 1] = last.trimRight();\n            prior.push(ca, template[i + 1].trimLeft());\n        }\n        else {\n            prior[prior.length - 1] = last + String(ca) + template[i + 1];\n        }\n        return prior;\n    }, [names[level] + ': ' + template[0]]);\n    if (level === levels.get('stringify')) {\n        // Just stringify.\n        return reduced.join(' ');\n    }\n    if (level >= levels.get('warn')) {\n        // Use console.error to provide an inspectable result.\n        console.error(...reduced);\n    }\n    else {\n        // Record a location, too.\n        const at0 = new Error().stack;\n        // Remove the current entry and our parent.\n        const at1 = at0.slice(at0.indexOf('\\n') + 1);\n        const at2 = at1.slice(at1.indexOf('\\n') + 1);\n        const at3 = at2.slice(at2.indexOf('\\n'));\n        console.error(...reduced, at3);\n    }\n    if (names[level] === 'reject') {\n        // Just return a promise rejection.\n        return Promise.reject(reduced.join(' '));\n    }\n    else if (level <= levels.get('panic')) {\n        // At least allow turns to finish.\n        process.exitCode = 99;\n    }\n    else if (level <= levels.get('error')) {\n        // Throw an exception without revealing stack.\n        throw reduced.join(' ');\n    }\n    return reduced.join(' ');\n});\nglobalEnv.slog = mySlog;\n// Export the environment as global endowments.  This is only possible\n// because we are in control of the main program, and we are setting\n// this policy for all our modules.\nObject.keys(globalEnv).forEach(vname => {\n    global[vname] = globalEnv[vname];\n});\nexport default globalEnv;\n","// DO NOT EDIT - Generated automatically from indent.mjs.ts by tessc\nconst indent = immunize((template, ...substs) => {\n  const result = [];\n  let newnewline = '\\n';\n  for (let i = 0, ilen = substs.length; i < ilen; i++) {\n    let segment = template[i];\n    if (i === 0 && segment[0].startsWith('\\n')) {\n      segment = segment.slice(1);\n    }\n    const lastnl = segment.lastIndexOf('\\n');\n    if (lastnl >= 0) {\n      newnewline = '\\n';\n      for (let j = segment.length - lastnl; j > 0; j--) {\n        newnewline += ' ';\n      }\n    }\n    result.push(segment);\n    // We don't have regexps at our disposal in Jessie.\n    String(substs[i]).split('\\n').forEach((subst, j) => {\n      if (j !== 0) {\n        result.push(newnewline);\n      }\n      result.push(subst);\n    });\n  }\n  result.push(template[substs.length]);\n  return result.join('');\n});\n\nexport default immunize(indent);","// DO NOT EDIT - Generated automatically from boot-peg.mjs.ts by tessc\n// A lot of this code is lifted from:\n// https://github.com/erights/quasiParserGenerator/tree/master/src/bootbnf.js\n\n/// <reference path=\"peg.d.ts\"/>\n\nimport $i_indent from './indent.mjs';const indent = immunize($i_indent);\n\nconst LEFT_RECUR = immunize({ toString: () => 'LEFT_RECUR' });\n\nconst RUN = immunize((self, ruleOrPatt, pos, name) => {\n  if (self._debug) {\n    slog.info`run(f, ${pos}, ${name})`;\n  }\n  let posm = self._memo.get(pos);\n  if (!posm) {\n    posm = makeMap();\n    self._memo.set(pos, posm);\n  }\n  let result = posm.get(ruleOrPatt);\n  if (result) {\n    if (result === LEFT_RECUR) {\n      slog.error`Left recursion on rule: ${{ name }}`;\n    }\n    self._hits(1);\n  } else {\n    posm.set(ruleOrPatt, LEFT_RECUR);\n    self._misses(1);\n    if (typeof ruleOrPatt === 'function') {\n      result = ruleOrPatt(self, pos);\n    } else if (ruleOrPatt === void 0) {\n      slog.error`Rule missing: ${name}`;\n    } else {\n      result = EAT(self, pos, ruleOrPatt);\n    }\n    posm.set(ruleOrPatt, result);\n  }\n  return result;\n});\n\nconst lastFailures = immunize(self => {\n  let maxPos = 0;\n  let fails = [];\n  for (const posArr of self._memo) {\n    const posm = posArr[1];\n    for (const [ruleOrPatt, result] of posm) {\n      if (result !== LEFT_RECUR) {\n        const fail = typeof ruleOrPatt === 'function' ?\n        ruleOrPatt.name.slice(5) :\n        JSON.stringify('' + ruleOrPatt);\n        const [newPos, v] = result;\n        if (v === FAIL) {\n          if (newPos > maxPos) {\n            maxPos = newPos;\n            fails = [fail];\n          } else if (newPos === maxPos && fails.indexOf(fail) < 0) {\n            fails.push(fail);\n          }\n        }\n      }\n    }\n  }\n  return [maxPos, fails];\n});\n\nconst ERROR = immunize((self, _pos) => {\n  const [last, fails] = lastFailures(self);\n  const found = FIND(self.template, last);\n  const tokStr = Array.isArray(found) ?\n  `at ${last} ${makeTokStr(self, found)}` :\n  `unexpected EOF after ${makeTokStr(self, FIND(self.template, last - 1))}`;\n\n  const failStr = fails.length === 0 ?\n  `stuck` : `looking for ${fails.join(', ')}`;\n  const { sources } = self.template;\n  slog.info`-------template--------\n    ${self.template.raw.reduce((prior, r, i) => {\n    if (sources) {\n      const s = sources[i];\n      prior += `    ${s.uri}:${s.line}: `;\n    }\n    prior += JSON.stringify(r).slice(0, 50) + '\\n';\n    return prior;\n  }, '')}\n    -------\n    ${failStr}`;\n  slog.error`Syntax error ${tokStr}`;\n});\n\nconst makeTokStr = immunize((self, found) => {\n  if (Array.isArray(found)) {\n    const segment = self.template[found[0]];\n    return `${JSON.stringify(segment[found[1]])} #${found[0]}:${found[1]}`;\n  }\n  if (typeof found === 'number') {\n    return `hole #${found}`;\n  }\n  return undefined;\n});\n\nconst DONE = immunize(self => {\n  if (self._debug) {\n    for (const [pos, posm] of self._memo) {\n      const fails = [];\n      for (const [ruleOrPatt, result] of posm) {\n        const name = typeof ruleOrPatt === 'function' ?\n        ruleOrPatt.name : JSON.stringify(ruleOrPatt);\n        if (result === LEFT_RECUR) {\n          slog.notice`${name}(${pos}) => left recursion detector`;\n        } else {\n          const [newPos, v] = result;\n          if (v === FAIL) {\n            fails.push(name);\n          } else {\n            slog.debug`${name}(${pos}) => [${newPos}, ${v}]`;\n          }\n        }\n      }\n      if (fails.length >= 1) {\n        slog.debug`@${pos} => FAIL [${fails}]`;\n      }\n    }\n    slog.info`hits: ${self._hits(0)}, misses: ${self._misses(0)}`;\n  }\n});\n\nconst FIND = immunize((template, pos) =>\n{\n  const { raw } = template;\n  const numSubs = raw.length - 1;\n  let relpos = pos;\n  for (let segnum = 0; segnum <= numSubs; segnum++) {\n    const segment = raw[segnum];\n    const seglen = segment.length;\n    if (relpos < seglen) {\n      return [segnum, relpos];\n    } else if (relpos === seglen && segnum < numSubs) {\n      return segnum; // as hole number\n    }\n    relpos -= seglen + 1; // \"+1\" for the skipped hole\n  }\n});\n\nconst ACCEPT = immunize((_self, pos) => {\n  // Not really needed: useful for incremental compilation.\n  return [pos, []];\n});\n\nconst EAT = immunize((self, pos, str) => {\n  // if (self._debug) {\n  //    slog.warn`Have ${self.template}`;\n  // }\n  const found = FIND(self.template, pos);\n  if (Array.isArray(found)) {\n    const segment = self.template.raw[found[0]];\n    if (typeof str === 'string') {\n      if (segment.startsWith(str, found[1])) {\n        return [pos + str.length, str];\n      }\n    } else {\n      // Just return the next character.\n      return [pos + 1, segment[found[1]]];\n    }\n  }\n  return [pos, FAIL];\n});\n\nconst HOLE = immunize((self, pos) => {\n  const found = FIND(self.template, pos);\n  if (typeof found === 'number') {\n    return [pos + 1, found];\n  }\n  return [pos, FAIL];\n});\n\nconst FAIL = immunize({ toString: () => 'FAIL' });\nconst SKIP = immunize({ toString: () => 'SKIP' });\n\nconst lHexDigits = '0123456789abcdef';\nconst uHexDigits = 'ABCDEF';\n\nconst hexDigit = immunize(c => {\n  let i = lHexDigits.indexOf(c);\n  if (i < 0) {\n    i = uHexDigits.indexOf(c) + 10;\n  }\n  if (i < 0) {\n    slog.error`Invalid hexadecimal number ${{ c }}`;\n  }\n  return i;\n});\n\nconst unescape = immunize(cs => {\n  if (cs[0] !== '\\\\') {\n    return [cs[0], 1];\n  }\n\n  // It's an escape.\n  let q = cs[1];\n  switch (q) {\n    case 'b':{\n        q = '\\b';\n        break;\n      }\n    case 'f':{\n        q = '\\f';\n        break;\n      }\n    case 'n':{\n        q = '\\n';\n        break;\n      }\n    case 'r':{\n        q = '\\r';\n        break;\n      }\n    case 't':{\n        q = '\\t';\n        break;\n      }\n    case 'x':{\n        const ord = hexDigit(cs[2]) * 16 + hexDigit(cs[3]);\n        q = String.fromCharCode(ord);\n        return [q, 4];\n      }}\n\n\n  return [q, 2];\n});\n\nconst bootPeg = immunize((makePeg, bootPegAst) => {\n  function compile(sexp) {\n    let numSubs = 0; // # of holes implied by sexp, so far\n\n    // generated names\n    // act_${i}      action parameter\n    // rule_${name}  method from peg rule\n    // seq_${i}      sequence failure label\n    // or_${i}       choice success label\n    // pos_${i}      backtrack token index\n    // s_${i}        accumulated list of values\n    // v_${i}        set to s_${i} on fall thru path\n\n    let alphaCount = 0;\n    const vars = ['let value = FAIL'];\n    function nextVar(prefix) {\n      const result = `${prefix}_${alphaCount++}`;\n      vars.push(result);\n      return result;\n    }\n    function takeVarsSrc() {\n      const result = `${vars.join(', ')};`;\n      vars.length = 1;\n      return result;\n    }\n    function nextLabel(prefix) {\n      return `${prefix}_${alphaCount++}`;\n    }\n\n    const vtable = {\n      peg(...rules) {\n        // The following line also initializes numSubs\n        const rulesSrc = rules.map(peval).join('\\n');\n\n        const paramSrcs = [];\n        for (let i = 0; i < numSubs; i++) {\n          paramSrcs.push(`act_${i}`);\n        }\n        // rules[0] is the ast of the first rule, which has the form\n        // [\"def\", ruleName, body], so rules[0][1] is the name of\n        // the start rule. We prepend \"rule_\" to get the name of the\n        // JS method that implements the start rule. We invoke it\n        // with (0) so that it will parse starting at position 0. It\n        // returns a pair of the final position (after the last\n        // non-EOF token parsed), and the semantic value. On failure\n        // to parse, the semantic value will be FAIL.\n        const name = rules[0][1];\n        return indent`\n    (function(${paramSrcs.join(', ')}) {\n      let myHits = 0, myMisses = 0;\n      return baseMemo => (template, debug) => {\n          const BaseParser = baseMemo({});\n          return {...BaseParser,\n        template,\n        _memo: makeMap(),\n        _hits: (i) => myHits += i,\n        _misses: (i) => myMisses += i,\n        _debug: debug,\n        start: (self) => {\n          const pair = RUN(self, self.rule_${name}, 0, ${JSON.stringify(name)});\n          if (pair[1] === FAIL) {\n            ERROR(self, pair[0]);\n          }\n          return pair[1];\n        },\n        done: DONE,\n        ${rulesSrc}\n    }};\n    })\n    `;\n      },\n      def(name, body) {\n        const bodySrc = peval(body);\n        return indent`\n    rule_${name}: (self, pos) => {\n      ${takeVarsSrc()}\n      ${bodySrc}\n      return [pos, value];\n    },`;\n      },\n      empty() {\n        return `value = SKIP;`;\n      },\n      fail() {\n        return `value = FAIL;`;\n      },\n      or(...choices) {\n        const labelSrc = nextLabel('or');\n        const choicesSrc = choices.map(peval).map(cSrc => indent`\n    ${cSrc}\n    if (value !== FAIL) break ${labelSrc};`).join('\\n');\n\n        return indent`\n    ${labelSrc}: {\n      ${choicesSrc}\n    }`;\n      },\n      seq(...terms) {\n        const posSrc = nextVar('pos');\n        const labelSrc = nextLabel('seq');\n        const sSrc = nextVar('s');\n        const vSrc = nextVar('v');\n        const termsSrc = terms.map(peval).map(termSrc => indent`\n    ${termSrc}\n    if (value === FAIL) break ${labelSrc};\n    if (value !== SKIP) ${sSrc}.push(value);`).join('\\n');\n\n        return indent`\n    ${sSrc} = [];\n    ${vSrc} = FAIL;\n    ${posSrc} = pos;\n    ${labelSrc}: {\n      let beginPos, yytext;\n      ${termsSrc}\n      if (yytext !== undefined) {\n          ${vSrc} = [yytext];\n      }\n      else {\n        ${vSrc} = ${sSrc};\n      }\n    }\n    if ((value = ${vSrc}) === FAIL) pos = ${posSrc};`;\n      },\n      pred(hole) {\n        numSubs = Math.max(numSubs, hole + 1);\n        return `[pos, value] = act_${hole}(self, pos);`;\n      },\n      val0(...terms) {\n        // FIXME: Find a better way to specify where < foo > can\n        // provide a default semantic action, and to warn\n        // when it is in the wrong context.\n        const termsSrc = vtable.seq(...terms);\n        return indent`\n    ${termsSrc}\n    if (value !== FAIL && value.length === 1) value = value[0];`;\n      },\n      act(hole, ...terms) {\n        const posSrc = nextVar('pos');\n        numSubs = Math.max(numSubs, hole + 1);\n        const termsSrc = vtable.seq(...terms);\n        return indent`\n    ${posSrc} = pos;\n    ${termsSrc}\n    if (value !== FAIL) {\n        value = act_${hole}(...value);\n        if (Array.isArray(value)) {\n            value = [...value];\n            value._pegPosition = makeTokStr(self, FIND(self.template, ${posSrc}));\n        }\n    }`;\n      },\n      '**'(patt, sep) {\n        // for backtracking\n        const posSrc = nextVar('pos');\n        // a non-advancing success only repeats once.\n        const startSrc = nextVar('pos');\n        const sSrc = nextVar('s');\n        const pattSrc = peval(patt);\n        const sepSrc = peval(sep);\n        const sepValSrc = nextVar('sepVal');\n        // after first iteration, backtrack to before the separator\n        return indent`\n    ${sSrc} = [];\n    ${posSrc} = pos;\n    ${sepValSrc} = SKIP;\n    while (true) {\n      ${startSrc} = pos;\n      ${pattSrc}\n      if (value === FAIL) {\n        pos = ${posSrc};\n        break;\n      }\n      if (${sepValSrc} !== SKIP) ${sSrc}.push(${sepValSrc});\n      if (value !== SKIP) ${sSrc}.push(value);\n      ${posSrc} = pos;\n      ${sepSrc}\n      if (value === FAIL) break;\n      ${sepValSrc} = value;\n      if (pos === ${startSrc}) break;\n    }\n    value = ${sSrc};`;\n      },\n      '++'(patt, sep) {\n        const starSrc = vtable['**'](patt, sep);\n        return indent`\n    ${starSrc}\n    if (value.length === 0) value = FAIL;`;\n      },\n      '?'(patt) {\n        return vtable['**'](patt, ['fail']);\n      },\n      '*'(patt) {\n        return vtable['**'](patt, ['empty']);\n      },\n      '+'(patt) {\n        return vtable['++'](patt, ['empty']);\n      },\n      super(ident) {\n        return `[pos, value] = RUN(self, BaseParser.rule_${ident}, pos, ${\n        JSON.stringify(`super.${ident}`)});`;\n      },\n      // PEG extensions.\n      begin() {\n        // Mark the current pos.\n        return `beginPos = pos; value = [];`;\n      },\n      end() {\n        // Use the specified beginPos to extract a string\n        return indent`\n    if (beginPos !== undefined) {\n        yytext = '';\n        while (beginPos < pos) {\n            [beginPos, value] = EAT(self, beginPos);\n            if (value === FAIL) {\n                break;\n            }\n            yytext += value;\n        }\n        beginPos = undefined;\n        value = [];\n    }`;\n      },\n      cls(cs) {\n        // Character class.\n        let classStr = '',i = 0;\n        const invert = cs[i] === '^';\n        if (invert) {\n          ++i;\n        }\n        while (i < cs.length) {\n          const [c, j] = unescape(cs.slice(i));\n          i += j;\n          if (cs[i] === '-') {\n            // It's a range.\n            ++i;\n            const [c2, j2] = unescape(cs.slice(i));\n            i += j2;\n            const min = c.charCodeAt(0);\n            const max = c2.charCodeAt(0);\n            for (let k = min; k <= max; k++) {\n              classStr += String.fromCharCode(k);\n            }\n          } else {\n            classStr += c;\n          }\n        }\n        const op = invert ? '>=' : '<';\n        const srcCs = JSON.stringify(classStr);\n        return indent`\n    [pos, value] = EAT(self, pos);\n    if (value !== FAIL) {\n        value = ${srcCs}.indexOf(value) ${op} 0 ? FAIL : value;\n    }\n                `;\n      },\n      dot() {\n        return indent`\n    [pos, value] = EAT(self, pos);\n                `;\n      },\n      lit(cs) {\n        let str = '',i = 0;\n        while (i < cs.length) {\n          const [c, j] = unescape(cs.slice(i));\n          i += j;\n          str += c;\n        }\n        return indent`\n    [pos, value] = EAT(self, pos, ${JSON.stringify(str)});\n    `;\n      },\n      peek(patt) {\n        // for backtracking\n        const posSrc = nextVar('pos');\n        const pattSrc = peval(patt);\n        // if the pattern matches, restore, else FAIL\n        // always rewind.\n        return indent`\n    ${posSrc} = pos;\n    ${pattSrc}\n    if (value !== FAIL) {\n        value = SKIP;\n    }\n    pos = ${posSrc};`;\n      },\n      peekNot(patt) {\n        // for backtracking\n        const posSrc = nextVar('pos');\n        const pattSrc = peval(patt);\n        // if the pattern matches, FAIL, else success,\n        // always rewind.\n        return indent`\n    ${posSrc} = pos;\n    ${pattSrc}\n    value = (value === FAIL) ? SKIP : FAIL;\n    pos = ${posSrc};`;\n      } };\n\n\n    function peval(expr) {\n      if (typeof expr === 'string') {\n        // We only match idents... literal strings are protected\n        // by ['lit', s].\n        const nameStr = JSON.stringify(expr);\n        return `[pos, value] = RUN(self, self.rule_${expr}, pos, ${nameStr});`;\n      }\n      const op = vtable[expr[0]];\n      if (!op) {\n        slog.error`Cannot find ${expr[0]} in vtable`;\n      }\n      return op(...expr.slice(1));\n    }\n\n    return peval(sexp);\n  }\n\n\n\n  function quasiMemo(quasiCurry,\n  parserCreator) {\n    const wm = makeWeakMap();\n    let debug = false;\n    const templateTag = (templateOrFlag, ...subs) => {\n      if (typeof templateOrFlag === 'string') {\n        switch (templateOrFlag) {\n          case 'DEBUG':{\n              // Called as tag('DEBUG')`template string`\n              // Turn on debug mode.\n              debug = true;\n              break;\n            }\n          default:{\n              throw slog.error`Unrecognized tag flag ${{ templateOrFlag }}`;\n            }}\n\n        return templateTag;\n      }\n      const template = templateOrFlag;\n      let quasiRest = wm.get(template);\n      if (!quasiRest) {\n        quasiRest = quasiCurry(template, debug);\n        wm.set(template, quasiRest);\n      }\n      if (typeof quasiRest !== 'function') {\n        slog.error`${typeof quasiRest}: ${quasiRest}`;\n      }\n      return quasiRest(...subs);\n    };\n    templateTag.parserCreator = parserCreator;\n    return templateTag;\n  }\n\n  function quasifyParser(parserCreator) {\n    function baseCurry(template, debug) {\n      const parser = parserCreator(template, debug);\n      if (parser === undefined) {\n        slog.error`Cannot curry baseParserCreator`;\n      }\n      let pair = null;\n      try {\n        pair = parser.start(parser);\n      } finally {\n        parser.done(parser); // hook for logging debug output\n      }\n      return pair;\n    }\n    return quasiMemo(baseCurry, parserCreator);\n  }\n\n  const defaultBaseGrammar = quasifyParser(_template => undefined);\n\n  function metaCompile(baseRules) {\n    const baseAST = ['peg', ...baseRules];\n    const parserTraitMakerSrc = compile(baseAST);\n    // slog.trace`SOURCES: ${parserTraitMakerSrc}\\n`;\n\n    const makeParserTrait = confine(parserTraitMakerSrc, {\n      DONE,\n      EAT,\n      ERROR,\n      FAIL,\n      FIND,\n      RUN,\n      SKIP,\n      makeTokStr });\n\n\n    return function parserTag(...baseActions) {\n      const parserTrait = makeParserTrait(...baseActions);\n      let _asExtending;\n      let quasiParser;\n      const ext = baseQuasiParser => {\n\n\n        function tag0(templateOrFlag, ...substs)\n        {\n          const flags = [];\n\n\n          function tag(tmplOrFlag, ...subs)\n          {\n            if (typeof tmplOrFlag === 'string') {\n              flags.push(tmplOrFlag);\n              return tag;\n            }\n            const boundParser = quasiParser(tmplOrFlag, ...subs);\n            const parserBase = boundParser._asExtending(baseQuasiParser);\n            const parser = flags.reduce((p, flag) => p(flag), parserBase);\n            return parser;\n          }\n\n          tag.ACCEPT = ACCEPT;\n          tag.EAT = EAT;\n          tag.FAIL = FAIL;\n          tag.HOLE = HOLE;\n          tag.SKIP = SKIP;\n          tag._asExtending = _asExtending;\n          tag.extends = ext;\n          tag.parserCreator = quasiParser.parserCreator;\n\n          if (typeof templateOrFlag === 'string') {\n            return tag(templateOrFlag);\n          }\n          return tag(templateOrFlag, ...substs);\n        }\n        tag0.ACCEPT = ACCEPT;\n        tag0.EAT = EAT;\n        tag0.FAIL = FAIL;\n        tag0.HOLE = HOLE;\n        tag0.SKIP = SKIP;\n        tag0._asExtending = _asExtending;\n        tag0.extends = ext;\n        tag0.parserCreator = quasiParser.parserCreator;\n        return tag0;\n      };\n      _asExtending = baseQuasiParser => {\n        const parserCreator = parserTrait(baseQuasiParser.parserCreator);\n        const parser = quasifyParser(parserCreator);\n        const pegTag = parser;\n        pegTag.ACCEPT = ACCEPT;\n        pegTag.EAT = EAT;\n        pegTag.FAIL = FAIL;\n        pegTag.HOLE = HOLE;\n        pegTag.SKIP = SKIP;\n        pegTag._asExtending = _asExtending;\n        pegTag.extends = ext;\n        return pegTag;\n      };\n      defaultBaseGrammar._asExtending = _asExtending;\n      const closedDefaultBaseGrammar =\n      defaultBaseGrammar;\n      closedDefaultBaseGrammar._asExtending = _asExtending;\n      quasiParser = _asExtending(closedDefaultBaseGrammar);\n      return quasiParser;\n    };\n  }\n\n  // Bootstrap the compiler with the precompiled pegAst.\n  const actionExtractorTag = (_template, ...actions) => actions;\n  actionExtractorTag.ACCEPT = ACCEPT;\n  actionExtractorTag.HOLE = HOLE;\n  actionExtractorTag.SKIP = SKIP;\n\n  // Extract the actions, binding them to the metaCompile function.\n  const bootPegActions = makePeg(actionExtractorTag, metaCompile);\n\n  // Create the parser tag from the AST and the actions.\n  const compiledAst = metaCompile(bootPegAst);\n  const bootPegTag = compiledAst(...bootPegActions);\n\n  // Use the parser tag to create another parser tag that returns the AST.\n  const astExtractorTag = makePeg(\n  bootPegTag, defs => (..._) => defs);\n  const reparsedPegAst = makePeg(astExtractorTag, undefined);\n\n  // Compare our bootPegTag output to bootPegAst, to help ensure it is\n  // correct.  This doesn't defend against a malicious bootPeg,\n  // but it does prevent silly mistakes.\n  const a = JSON.stringify(bootPegAst, undefined, '  ');\n  const b = JSON.stringify(reparsedPegAst, undefined, '  ');\n  if (a !== b) {\n    slog.info`// boot-pegast.mjs.ts - AUTOMATICALLY GENERATED by boot-peg.mjs.ts\\nexport default ${{ b }};`;\n    slog.panic`reparsedPegAst does not match src/boot-pegast.mjs.ts`;\n  }\n\n  // Use the metaCompiler to generate another parser.\n  const finalPegTag = makePeg(bootPegTag, metaCompile);\n  return finalPegTag;\n});\n\nexport default immunize(bootPeg);","// DO NOT EDIT - Generated automatically from boot-pegast.mjs.ts by tessc\n// boot-pegast.mjs.ts - AUTOMATICALLY GENERATED by boot-env.mjs.ts\nexport default immunize([\n[\n\"def\",\n\"Grammar\",\n[\n\"act\",\n0,\n\"_Spacing\",\n[\n\"+\",\n\"Definition\"],\n\n\"_EndOfFile\"]],\n\n\n[\n\"def\",\n\"Definition\",\n[\n\"act\",\n2,\n\"Identifier\",\n\"LEFTARROW\",\n\"Expression\",\n\"SEMI\",\n[\n\"pred\",\n1]]],\n\n\n\n[\n\"def\",\n\"Expression\",\n[\n\"act\",\n3,\n[\n\"**\",\n\"Sequence\",\n\"_SLASH\"]]],\n\n\n\n[\n\"def\",\n\"Sequence\",\n[\n\"act\",\n5,\n[\n\"act\",\n4,\n[\n\"*\",\n\"Prefix\"]],\n\n\n[\n\"?\",\n\"HOLE\"]]],\n\n\n\n[\n\"def\",\n\"Prefix\",\n[\n\"or\",\n[\n\"act\",\n6,\n\"AND\",\n\"HOLE\"],\n\n[\n\"act\",\n7,\n\"AND\",\n\"Suffix\"],\n\n[\n\"act\",\n8,\n\"NOT\",\n\"Suffix\"],\n\n[\n\"val0\",\n\"Suffix\"]]],\n\n\n\n[\n\"def\",\n\"Suffix\",\n[\n\"or\",\n[\n\"act\",\n9,\n\"Primary\",\n[\n\"or\",\n[\n\"val0\",\n\"STARSTAR\"],\n\n[\n\"val0\",\n\"PLUSPLUS\"]],\n\n\n\"Primary\"],\n\n[\n\"act\",\n10,\n\"Primary\",\n[\n\"or\",\n[\n\"val0\",\n\"QUESTION\"],\n\n[\n\"val0\",\n\"STAR\"],\n\n[\n\"val0\",\n\"PLUS\"]]],\n\n\n\n[\n\"val0\",\n\"Primary\"]]],\n\n\n\n[\n\"def\",\n\"Primary\",\n[\n\"or\",\n[\n\"val0\",\n\"Super\"],\n\n[\n\"val0\",\n\"Identifier\",\n[\n\"peekNot\",\n\"LEFTARROW\"]],\n\n\n[\n\"act\",\n11,\n\"OPEN\",\n\"Expression\",\n\"CLOSE\"],\n\n[\n\"act\",\n12,\n\"Literal\"],\n\n[\n\"act\",\n13,\n\"Class\"],\n\n[\n\"act\",\n14,\n\"DOT\"],\n\n[\n\"act\",\n15,\n\"BEGIN\"],\n\n[\n\"act\",\n16,\n\"END\"]]],\n\n\n\n[\n\"def\",\n\"Super\",\n[\n\"act\",\n17,\n[\n\"lit\",\n\"super.\"],\n\n\"Identifier\"]],\n\n\n[\n\"def\",\n\"Identifier\",\n[\n\"val0\",\n[\n\"begin\"],\n\n\"IdentStart\",\n[\n\"*\",\n\"IdentCont\"],\n\n[\n\"end\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"IdentStart\",\n[\n\"val0\",\n[\n\"cls\",\n\"a-zA-Z_\"]]],\n\n\n\n[\n\"def\",\n\"IdentCont\",\n[\n\"or\",\n[\n\"val0\",\n\"IdentStart\"],\n\n[\n\"val0\",\n[\n\"cls\",\n\"0-9\"]]]],\n\n\n\n\n[\n\"def\",\n\"Literal\",\n[\n\"or\",\n[\n\"val0\",\n[\n\"cls\",\n\"'\"],\n\n[\n\"begin\"],\n\n[\n\"*\",\n[\n\"val0\",\n[\n\"peekNot\",\n[\n\"cls\",\n\"'\"]],\n\n\n\"Char\"]],\n\n\n[\n\"end\"],\n\n[\n\"cls\",\n\"'\"],\n\n\"_Spacing\"],\n\n[\n\"val0\",\n[\n\"cls\",\n\"\\\"\"],\n\n[\n\"begin\"],\n\n[\n\"*\",\n[\n\"val0\",\n[\n\"peekNot\",\n[\n\"cls\",\n\"\\\"\"]],\n\n\n\"Char\"]],\n\n\n[\n\"end\"],\n\n[\n\"cls\",\n\"\\\"\"],\n\n\"_Spacing\"]]],\n\n\n\n[\n\"def\",\n\"Class\",\n[\n\"val0\",\n[\n\"lit\",\n\"[\"],\n\n[\n\"begin\"],\n\n[\n\"*\",\n[\n\"val0\",\n[\n\"peekNot\",\n[\n\"lit\",\n\"]\"]],\n\n\n\"Range\"]],\n\n\n[\n\"end\"],\n\n[\n\"lit\",\n\"]\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"Range\",\n[\n\"or\",\n[\n\"val0\",\n\"Char\",\n[\n\"lit\",\n\"-\"],\n\n\"Char\"],\n\n[\n\"val0\",\n\"Char\"]]],\n\n\n\n[\n\"def\",\n\"Char\",\n[\n\"or\",\n[\n\"val0\",\n[\n\"lit\",\n\"\\\\\\\\\"],\n\n[\n\"cls\",\n\"abefnrtv'\\\"\\\\[\\\\]\\\\\\\\\\\\`\\\\$\"]],\n\n\n[\n\"val0\",\n[\n\"lit\",\n\"\\\\\\\\x\"],\n\n[\n\"cls\",\n\"0-9a-fA-F\"],\n\n[\n\"cls\",\n\"0-9a-fA-F\"]],\n\n\n[\n\"val0\",\n[\n\"lit\",\n\"\\\\\\\\\"],\n\n[\n\"lit\",\n\"-\"]],\n\n\n[\n\"val0\",\n[\n\"peekNot\",\n[\n\"lit\",\n\"\\\\\\\\\"]],\n\n\n[\n\"dot\"]]]],\n\n\n\n\n[\n\"def\",\n\"LEFTARROW\",\n[\n\"val0\",\n[\n\"lit\",\n\"<-\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"_SLASH\",\n[\n\"act\",\n18,\n[\n\"lit\",\n\"/\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"SEMI\",\n[\n\"val0\",\n[\n\"lit\",\n\";\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"AND\",\n[\n\"val0\",\n[\n\"lit\",\n\"&\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"NOT\",\n[\n\"val0\",\n[\n\"lit\",\n\"~\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"QUESTION\",\n[\n\"val0\",\n[\n\"lit\",\n\"?\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"STAR\",\n[\n\"val0\",\n[\n\"lit\",\n\"*\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"PLUS\",\n[\n\"val0\",\n[\n\"lit\",\n\"+\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"OPEN\",\n[\n\"val0\",\n[\n\"lit\",\n\"(\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"CLOSE\",\n[\n\"val0\",\n[\n\"lit\",\n\")\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"DOT\",\n[\n\"val0\",\n[\n\"lit\",\n\".\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"_Spacing\",\n[\n\"act\",\n19,\n[\n\"*\",\n[\n\"or\",\n[\n\"val0\",\n\"Space\"],\n\n[\n\"val0\",\n\"Comment\"]]]]],\n\n\n\n\n\n[\n\"def\",\n\"Comment\",\n[\n\"val0\",\n[\n\"lit\",\n\"#\"],\n\n[\n\"*\",\n[\n\"val0\",\n[\n\"peekNot\",\n\"EndOfLine\"],\n\n[\n\"dot\"]]],\n\n\n\n\"EndOfLine\"]],\n\n\n[\n\"def\",\n\"Space\",\n[\n\"or\",\n[\n\"val0\",\n[\n\"lit\",\n\" \"]],\n\n\n[\n\"val0\",\n[\n\"lit\",\n\"\\\\t\"]],\n\n\n[\n\"val0\",\n\"EndOfLine\"]]],\n\n\n\n[\n\"def\",\n\"EndOfLine\",\n[\n\"or\",\n[\n\"val0\",\n[\n\"lit\",\n\"\\\\r\\\\n\"]],\n\n\n[\n\"val0\",\n[\n\"lit\",\n\"\\\\n\"]],\n\n\n[\n\"val0\",\n[\n\"lit\",\n\"\\\\r\"]]]],\n\n\n\n\n[\n\"def\",\n\"_EndOfFile\",\n[\n\"val0\",\n[\n\"peekNot\",\n[\n\"dot\"]]]],\n\n\n\n\n[\n\"def\",\n\"HOLE\",\n[\n\"val0\",\n[\n\"pred\",\n20],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"BEGIN\",\n[\n\"val0\",\n[\n\"lit\",\n\"<\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"END\",\n[\n\"val0\",\n[\n\"lit\",\n\">\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"PLUSPLUS\",\n[\n\"val0\",\n[\n\"lit\",\n\"++\"],\n\n\"_Spacing\"]],\n\n\n[\n\"def\",\n\"STARSTAR\",\n[\n\"val0\",\n[\n\"lit\",\n\"**\"],\n\n\"_Spacing\"]]]);","// DO NOT EDIT - Generated automatically from quasi-peg.mjs.ts by tessc\n// PEG quasi Grammar for PEG quasi Grammars\n// Michael FIG <michael+jessica@fig.org>, 2019-01-05\n//\n// This grammar is adapted from:\n// http://piumarta.com/software/peg/peg-0.1.18/src/peg.peg\n//\n// Modified for Jessica to support:\n//   Semantic actions provided in tagged template HOLEs\n//   '~' for negative lookahead (instead of '!')\n//   ';' terminator for definitions\n//   '**' and '++' for separators\n//   'super.RULE' syntax for extended grammars\n//   '\\xFF' instead of octal character literals\n// which are adapted from:\n// https://github.com/erights/quasiParserGenerator\n\n/// <reference path=\"peg.d.ts\"/>\n\nconst makePeg = immunize((\npegTag,\nmetaCompile) => {\n  const { ACCEPT, HOLE, SKIP } = pegTag;\n\n  function simple(prefix, list) {\n    if (list.length === 0) {return ['empty'];}\n    if (list.length === 1) {return list[0];}\n    return [prefix, ...list];\n  }\n\n  function flatArgs(args) {\n    return args.reduce((prior, a) => {\n      prior.push(...flatSeq(a));\n      return prior;\n    }, []);\n  }\n\n  function flatSeq(term) {\n    if (Array.isArray(term)) {\n      if (term.length === 0) {\n        return [];\n      }\n      const [kind, ...terms] = term;\n      if (kind === 'seq') {\n        return flatArgs(terms);\n      } else if (terms.length === 0 && Array.isArray(kind)) {\n        return flatSeq(kind);\n      } else {\n        return [[kind, ...flatArgs(terms)]];\n      }\n    }\n\n    return [term];\n  }\n\n  return pegTag`\n# Hierarchical syntax\n\nGrammar      <- _Spacing Definition+ _EndOfFile\n                    ${metaCompile};\n\nDefinition   <- Identifier LEFTARROW Expression SEMI &${ACCEPT}\n                    ${(i, _, e, _2) => ['def', i, e]};\nExpression   <- Sequence ** _SLASH\n                    ${list => simple('or', list)};\nSequence     <- (Prefix*\n                    ${list => simple('seq', list)})\n                 HOLE?\n                    ${(seq, optHole) => optHole.length === 0 ?\n  ['val0', ...flatSeq(seq)] :\n  ['act', optHole[0], ...flatSeq(seq)]};\nPrefix       <- AND HOLE\n                    ${(_, a) => ['pred', a]}\n              / AND Suffix\n                    ${(_, s) => ['peek', s]}\n              / NOT Suffix\n                    ${(_, s) => ['peekNot', s]}\n              /     Suffix;\nSuffix       <- Primary (STARSTAR\n                        / PLUSPLUS) Primary\n                    ${(patt, q, sep) => [q, patt, sep]}\n              / Primary (QUESTION\n                        / STAR\n                        / PLUS)\n                    ${(patt, optQ) => [optQ[0], patt]}\n              / Primary;\nPrimary      <- Super\n              / Identifier ~LEFTARROW\n              / OPEN Expression CLOSE\n                    ${(_, e, _2) => e}\n              / Literal\n                    ${s => ['lit', s]}\n              / Class\n                    ${c => ['cls', c]}\n              / DOT\n                    ${() => ['dot']}\n              / BEGIN\n                    ${() => ['begin']}\n              / END\n                    ${() => ['end']}\n              ;\n\nSuper        <- 'super.' Identifier\n                    ${(_, i) => ['super', i]};\n\n# Lexical syntax\n\nIdentifier   <- < IdentStart IdentCont* > _Spacing;\nIdentStart   <- [a-zA-Z_];\nIdentCont    <- IdentStart / [0-9];\nLiteral      <- ['] < (~['] Char )* > ['] _Spacing\n              / [\"] < (~[\"] Char )* > [\"] _Spacing;\nClass        <- '[' < (~']' Range)* > ']' _Spacing;\nRange        <- Char '-' Char / Char;\nChar         <- '\\\\' [abefnrtv'\"\\[\\]\\\\\\`\\$]\n              / '\\\\x' [0-9a-fA-F][0-9a-fA-F]\n              / '\\\\' '-'\n              / ~'\\\\' .;\nLEFTARROW    <- '<-' _Spacing;\n_SLASH        <- '/' _Spacing              ${_ => SKIP};\nSEMI         <- ';' _Spacing;\nAND          <- '&' _Spacing;\nNOT          <- '~' _Spacing;\nQUESTION     <- '?' _Spacing;\nSTAR         <- '*' _Spacing;\nPLUS         <- '+' _Spacing;\nOPEN         <- '(' _Spacing;\nCLOSE        <- ')' _Spacing;\nDOT          <- '.' _Spacing;\n_Spacing      <- (Space / Comment)*        ${_ => SKIP};\nComment      <- '#' (~EndOfLine .)* EndOfLine;\nSpace        <- ' ' / '\\t' / EndOfLine;\nEndOfLine    <- '\\r\\n' / '\\n' / '\\r';\n_EndOfFile    <- ~.;\n\nHOLE         <- &${HOLE} _Spacing;\nBEGIN        <- '<' _Spacing;\nEND          <- '>' _Spacing;\nPLUSPLUS     <- '++' _Spacing;\nSTARSTAR     <- '**' _Spacing;\n`;\n});\n\nexport default immunize(makePeg);","// DO NOT EDIT - Generated automatically from quasi-jessie.mjs.ts by tessc\n// Subsets of JavaScript, starting from the grammar as defined at\n// http://www.ecma-international.org/ecma-262/9.0/#sec-grammar-summary\n\n// See https://github.com/Agoric/Jessie/blob/master/README.md\n// for documentation of the Jessie grammar defined here.\n\n/// <reference path=\"peg.d.ts\"/>\n\n\nconst terminatedBlock = immunize(manyBodies => {\n  const stmts = manyBodies.reduce((prior, body) => {\n    const [bs, t] = body;\n    bs.forEach(b => prior.push(b));\n    prior.push(t);\n    return prior;\n  }, []);\n  return ['block', stmts];\n});\n\nconst makeJessie = immunize((peg, justinPeg) => {\n  const { SKIP } = justinPeg;\n  const jessieTag = justinPeg`\n    # Override rather than inherit start production.\n    # Only module syntax is permitted.\n    start <- _WS moduleBody _EOF               ${b => (..._a) => ['module', b]};\n\n    # A.1 Lexical Grammar\n\n    # For proposed eventual send expressions\n    LATER <- _NO_NEWLINE \"!\" _WS;\n\n    # A.2 Expressions\n\n    # Jessie primaryExpr does not include \"this\", ClassExpression,\n    # GeneratorExpression, AsyncFunctionExpression,\n    # AsyncGenerarorExpression, or RegularExpressionLiteral.\n    primaryExpr <-\n      super.primaryExpr\n    / functionExpr;\n\n    propDef <-\n      methodDef\n    / super.propDef;\n\n    purePropDef <-\n      methodDef\n    / super.purePropDef;\n\n    # Recognize pre-increment/decrement.\n    prePre <-\n      (PLUSPLUS / MINUSMINUS)                          ${op => `pre:${op}`}\n    / super.prePre;\n\n    # Extend to recognize proposed eventual get syntax,\n    # as well as computed indices and postfix increment/decrement.\n    memberPostOp <-\n      super.memberPostOp\n    / LEFT_BRACKET assignExpr RIGHT_BRACKET        ${(_, e, _2) => ['index', e]}\n    / LATER LEFT_BRACKET assignExpr RIGHT_BRACKET  ${(_, _2, e, _3) => ['indexLater', e]}\n    / LATER IDENT_NAME                             ${(_, id) => ['getLater', id]};\n\n    # Extend to recognize proposed eventual send syntax.\n    # We distinguish b!foo(x) from calling b!foo by a post-parsing pass\n    callPostOp <-\n      super.callPostOp\n    / LATER args                                           ${(_, args) => ['callLater', args]};\n\n    postOp <- (PLUSPLUS / MINUSMINUS) _WS;\n\n    # to be extended\n    assignExpr <-\n      arrowFunc\n    / functionExpr\n    / lValue postOp                                        ${(lv, op) => [op, lv]}\n    / lValue (EQUALS / assignOp) assignExpr                ${(lv, op, rv) => [op, lv, rv]}\n    / super.assignExpr\n    / primaryExpr;\n\n    # An expression without side-effects.\n    pureExpr <-\n      arrowFunc\n    / super.pureExpr;\n\n    # In Jessie, an lValue is only a variable, a computed index-named\n    # property (an array element), or a statically string-named\n    # property.\n    # We allow assignment to statically string-named fields, since it\n    # is useful during initialization and prevented thereafter by\n    # mandatory tamper-proofing.\n\n    # to be overridden or extended\n    lValue <-\n      primaryExpr LEFT_BRACKET indexExpr RIGHT_BRACKET     ${(pe, _, e, _2) => ['index', pe, e]}\n    / primaryExpr LATER LEFT_BRACKET indexExpr RIGHT_BRACKET ${(pe, _, _2, e, _3) => ['indexLater', pe, e]}\n    / primaryExpr DOT IDENT_NAME                           ${(pe, _, id) => ['get', pe, id]}\n    / primaryExpr LATER IDENT_NAME                         ${(pe, _, id) => ['getLater', pe, id]}\n    / useVar;\n\n    assignOp <-\n      (\"*=\" / \"/=\" / \"%=\" / \"+=\" / \"-=\"\n    / \"<<=\" / \">>=\" / \">>>=\"\n    / \"&=\" / \"^=\" / \"|=\"\n    / \"**=\") _WS;\n\n\n    # A.3 Statements\n\n    # to be extended.\n    # The exprStatement production must go last, so PEG's prioritized\n    # choice will interpret {} as a block rather than an expression.\n    statement <-\n      block\n    / IF LEFT_PAREN expr RIGHT_PAREN arm ELSE elseArm      ${(_, _2, c, _3, t, _4, e) => ['if', c, t, e]}\n    / IF LEFT_PAREN expr RIGHT_PAREN arm                   ${(_, _2, c, _3, t) => ['if', c, t]}\n    / breakableStatement\n    / terminator\n    / IDENT COLON statement                                ${(label, _, stat) => ['label', label, stat]}\n    / TRY block catcher finalizer                          ${(_, b, c, f) => ['try', b, c, f]}\n    / TRY block catcher                                    ${(_, b, c) => ['try', b, c]}\n    / TRY block finalizer                                  ${(_, b, f) => ['try', b, undefined, f]}\n    / DEBUGGER SEMI                                        ${(_, _2) => ['debugger']}\n    / exprStatement;\n\n    # to be overridden.  In Jessie, only blocks are accepted as arms\n    # of flow-of-control statements.\n    arm <- block;\n\n    # Allows for\n    # if (...) {} else if (...) {} else if (...) {};\n    elseArm <-\n      arm\n    / IF LEFT_PAREN expr RIGHT_PAREN arm ELSE elseArm      ${(_, _2, c, _3, t, _4, e) => ['if', c, t, e]}\n    / IF LEFT_PAREN expr RIGHT_PAREN arm                   ${(_, _2, c, _3, t) => ['if', c, t]};\n\n    breakableStatement <-\n      FOR LEFT_PAREN declOp forOfBinding OF expr RIGHT_PAREN arm\n            ${(_, _2, o, d, _3, e, _4, b) => ['forOf', o, d, e, b]}\n    / FOR LEFT_PAREN declaration expr? SEMI expr? RIGHT_PAREN arm ${(_, _2, d, c, _3, i, _4, b) => ['for', d, c, i, b]}\n    / WHILE LEFT_PAREN expr RIGHT_PAREN arm                       ${(_, _2, c, _3, b) => ['while', c, b]}\n    / SWITCH LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE clause* RIGHT_BRACE\n            ${(_, _2, e, _3, _4, bs, _5) => ['switch', e, bs]};\n\n    # Each case clause must end in a terminating statement.\n    terminator <-\n      \"continue\" _NO_NEWLINE IDENT SEMI                ${(_, label, _3) => ['continue', label]}\n    / \"continue\" _WS SEMI                              ${(_, _2) => ['continue']}\n    / \"break\" _NO_NEWLINE IDENT SEMI                   ${(_, label, _2) => ['break', label]}\n    / \"break\" _WS SEMI                                 ${(_, _2) => ['break']}\n    / \"return\" _NO_NEWLINE expr SEMI                   ${(_, e, _2) => ['return', e]}\n    / \"return\" _WS SEMI                                ${(_, _2) => ['return']}\n    / \"throw\" _NO_NEWLINE expr SEMI                    ${(_, e, _3) => ['throw', e]};\n\n    block <- LEFT_BRACE body RIGHT_BRACE              ${(_, b, _2) => ['block', b]};\n    body <- statementItem*;\n\n    # declaration must come first, so that PEG will prioritize\n    # function declarations over exprStatement.\n    statementItem <-\n      declaration\n    / statement;\n\n    # No \"class\" declaration.\n    # No generator, async, or async iterator function.\n    declaration <-\n      declOp binding ** _COMMA SEMI                    ${(op, decls, _) => [op, decls]}\n    / functionDecl;\n\n    declOp <- (\"const\" / \"let\") _WSN;\n\n    forOfBinding <- bindingPattern / defVar;\n    binding <-\n      bindingPattern EQUALS assignExpr                ${(p, _, e) => ['bind', p, e]}\n    / defVar EQUALS assignExpr                        ${(p, _, e) => ['bind', p, e]}\n    / defVar;\n\n    bindingPattern <-\n      LEFT_BRACKET elementParam ** _COMMA RIGHT_BRACKET     ${(_, ps, _2) => ['matchArray', ps]}\n    / LEFT_BRACE propParam ** _COMMA RIGHT_BRACE            ${(_, ps, _2) => ['matchRecord', ps]};\n\n    pattern <-\n      bindingPattern\n    / defVar\n    / dataLiteral                                     ${n => ['matchData', JSON.parse(n)]}\n    / HOLE                                            ${h => ['patternHole', h]};\n\n    # to be overridden\n    elementParam <- param;\n\n    param <-\n      ELLIPSIS pattern                                ${(_, p) => ['rest', p]}\n    / defVar EQUALS assignExpr                        ${(v, _, e) => ['optional', v, e]}\n    / pattern;\n\n    propParam <-\n      ELLIPSIS pattern                                ${(_, p) => ['restObj', p]}\n    / propName COLON pattern                          ${(k, _, p) => ['matchProp', k, p]}\n    / defVar EQUALS assignExpr                        ${(id, _, e) => ['optionalProp', id[1], id, e]}\n    / defVar                                          ${id => ['matchProp', id[1], id]};\n\n    # Use PEG prioritized choice.\n    # TODO emit diagnostic for failure cases.\n    exprStatement <-\n      ~cantStartExprStatement expr SEMI               ${(e, _2) => e};\n\n    cantStartExprStatement <-\n      (\"{\" / \"function\" / \"async\" _NO_NEWLINE \"function\"\n    / \"class\" / \"let\" / \"[\") _WSN;\n\n    # to be overridden\n    terminatedBody <- ((~terminator statementItem)* terminator)+   ${tb => terminatedBlock(tb)};\n    clause <-\n      caseLabel+ LEFT_BRACE terminatedBody RIGHT_BRACE ${(cs, _, b, _2) => ['clause', cs, b]};\n    caseLabel <-\n      CASE expr COLON                                 ${(_, e) => ['case', e]}\n    / DEFAULT _WS COLON                                ${(_, _2) => ['default']};\n\n    catcher <- CATCH LEFT_PAREN pattern RIGHT_PAREN block ${(_, _2, p, _3, b) => ['catch', p, b]};\n    finalizer <- FINALLY block                        ${(_, b) => ['finally', b]};\n\n\n    # A.4 Functions and Classes\n\n    functionDecl <-\n      FUNCTION defVar LEFT_PAREN param ** _COMMA RIGHT_PAREN block\n                                                      ${(_, n, _2, p, _3, b) => ['functionDecl', n, p, b]};\n\n    functionExpr <-\n      FUNCTION defVar? LEFT_PAREN param ** _COMMA RIGHT_PAREN block\n                                                      ${(_, n, _2, p, _3, b) => ['functionExpr', n[0], p, b]};\n\n    # The assignExpr form must come after the block form, to make proper use\n    # of PEG prioritized choice.\n    arrowFunc <-\n      arrowParams _NO_NEWLINE ARROW block              ${(ps, _2, b) => ['arrow', ps, b]}\n    / arrowParams _NO_NEWLINE ARROW assignExpr         ${(ps, _2, e) => ['lambda', ps, e]};\n\n    arrowParams <-\n      IDENT                                           ${id => [['def', id]]}\n    / LEFT_PAREN param ** _COMMA RIGHT_PAREN           ${(_, ps, _2) => ps};\n\n    # to be extended\n    methodDef <-\n      method\n    / GET propName LEFT_PAREN RIGHT_PAREN block            ${(_, n, _2, _3, b) => ['getter', n, [], b]}\n    / SET propName LEFT_PAREN param RIGHT_PAREN block      ${(_, n, _2, p, _3, b) => ['setter', n, [p], b]};\n\n    method <-\n      propName LEFT_PAREN param ** _COMMA RIGHT_PAREN block ${(n, _, p, _2, b) => ['method', n, p, b]};\n\n\n    # A.5 Scripts and Modules\n\n    moduleBody <- moduleItem*;\n    moduleItem <-\n      SEMI                                               ${_ => SKIP}\n    / importDecl\n    / exportDecl\n    / moduleDeclaration;\n\n    useImport <- IMPORT_PFX IDENT                 ${(pfx, id) => ['use', pfx + id]};\n    defImport <- IMPORT_PFX IDENT                 ${(pfx, id) => ['def', pfx + id]};\n\n    moduleDeclaration <-\n      \"const\" _WSN moduleBinding ** _COMMA SEMI       ${(op, decls) => [op, decls]};\n\n    # An immunized expression without side-effects.\n    immunizedExpr <-\n      dataLiteral                                     ${d => ['data', JSON.parse(d)]}\n    / \"immunize\" _WS LEFT_PAREN (pureExpr / useImport) RIGHT_PAREN  ${(fname, _2, expr, _3) =>\n  ['call', ['use', fname], [expr]]};\n\n    # Jessie modules only allow immunized module-level bindings.\n    moduleBinding <-\n      bindingPattern EQUALS immunizedExpr       ${(p, _, e) => ['bind', p, e]}\n    / defVar EQUALS immunizedExpr               ${(p, _, e) => ['bind', p, e]}\n    / defVar;\n\n    importClause <-\n      defImport                                 ${d => ['importBind', [['as', 'default', d[1]]]]}\n    / STAR AS defImport                         ${(_, _2, d) => ['importBind', [['as', '*', d[1]]]]}\n    / namedImports                              ${n => ['importBind', n]}\n    / defImport _COMMA STAR AS defImport        ${(d, _, _2, d2) => ['importBind', [['as', 'default', d[1]],\n  ['as', '*', d2[1]]]]}\n    / defImport _COMMA namedImports             ${(d, n) => ['importBind', [['as', 'default', d[1]], ...n]]};\n\n    importSpecifier <-\n      defImport                                 ${d => ['as', d[1], d[1]]}\n    / IDENT_NAME AS defImport                   ${(i, _, d) => ['as', i, d[1]]};\n\n    namedImports <-\n      LEFT_BRACE importSpecifier ** _COMMA _COMMA? RIGHT_BRACE ${(_, s, _2) => s};\n\n    importDecl <- IMPORT importClause FROM STRING SEMI  ${(_, v, _2, s, _3) => ['import', v, JSON.parse(s)]};\n    exportDecl <-\n      EXPORT DEFAULT exportableExpr SEMI        ${(_, _2, e, _3) => ['exportDefault', e]}\n    / EXPORT moduleDeclaration                  ${(_, d) => ['export', ...d]};\n\n    # to be extended\n    exportableExpr <- immunizedExpr;\n\n    # Lexical syntax\n    ARROW <- \"=>\" _WS;\n    AS <- \"as\" _WSN;\n    DEBUGGER <- \"debugger\" _WSN;\n    PLUSPLUS <- \"++\" _WSN;\n    MINUSMINUS <- \"--\" _WSN;\n    CASE <- \"case\" _WSN;\n    IF <- \"if\" _WSN;\n    ELSE <- \"else\" _WSN;\n    FOR <- \"for\" _WSN;\n    OF <- \"of\" _WSN;\n    WHILE <- \"while\" _WSN;\n    BREAK <- \"break\" _WSN;\n    CONTINUE <- \"continue\" _WSN;\n    SWITCH <- \"switch\" _WSN;\n    TRY <- \"try\" _WSN;\n    CATCH <- \"catch\" _WSN;\n    FINALLY <- \"finally\" _WSN;\n    GET <- \"get\" _WSN;\n    SET <- \"set\" _WSN;\n    IMPORT <- \"import\" _WSN;\n    EXPORT <- \"export\" _WSN;\n    FROM <- \"from\" _WSN;\n    FUNCTION <- \"function\" _WSN;\n    DEFAULT <- \"default\" _WSN;\n    EQUALS <- \"=\" _WS;\n    SEMI <- \";\" _WS;\n    STAR <- \"*\" _WS;\n    `;\n\n  const jessieExprTag = peg.extends(jessieTag)`\n    # Jump to the expr production.\n    start <- _WS expr _EOF              ${e => (..._a) => e};\n    `;\n\n  return [jessieTag, jessieExprTag];\n});\n\nexport default immunize(makeJessie);","// DO NOT EDIT - Generated automatically from quasi-json.mjs.ts by tessc\n// Subsets of JavaScript, starting from the grammar as defined at\n// http://www.ecma-international.org/ecma-262/9.0/#sec-grammar-summary\n\n// Defined to be extended into the Jessie grammar.\n// See https://github.com/Agoric/Jessie/blob/master/README.md\n// for documentation of the Jessie grammar.\n\n// See also json.org\n\n/// <reference path=\"peg.d.ts\"/>\n\nconst makeJSON = immunize(peg => {\n  const { FAIL, HOLE, SKIP } = peg;\n  return peg`\n# to be overridden or inherited\nstart <- _WS assignExpr _EOF                ${v => (..._a) => v};\n\n# to be extended\nprimaryExpr <- dataStructure;\n\ndataStructure <-\n  dataLiteral                             ${n => ['data', JSON.parse(n)]}\n/ array\n/ record\n/ HOLE                                    ${h => ['exprHole', h]};\n\n# An expression without side-effects.\n# to be extended\npureExpr <-\n  dataLiteral                             ${n => ['data', JSON.parse(n)]}\n/ pureArray\n/ pureRecord\n/ HOLE                                    ${h => ['exprHole', h]};\n\ndataLiteral <- ((\"null\" / \"false\" / \"true\") _WSN / NUMBER / STRING) _WS;\n\npureArray <-\n  LEFT_BRACKET pureExpr ** _COMMA _COMMA? RIGHT_BRACKET ${(_, es, _2) => ['array', es]};\n\narray <-\n  LEFT_BRACKET element ** _COMMA _COMMA? RIGHT_BRACKET ${(_, es, _2) => ['array', es]};\n\n# to be extended\nelement <- assignExpr;\n\n# The JavaScript and JSON grammars calls records \"objects\"\n\npureRecord <-\n  LEFT_BRACE purePropDef ** _COMMA _COMMA? RIGHT_BRACE  ${(_, ps, _2) => ['record', ps]};\n\nrecord <-\n  LEFT_BRACE propDef ** _COMMA _COMMA? RIGHT_BRACE  ${(_, ps, _2) => ['record', ps]};\n\n# to be extended\npurePropDef <- propName COLON pureExpr     ${(k, _, e) => ['prop', k, e]};\n\n# to be extended\npropDef <- propName COLON assignExpr       ${(k, _, e) => ['prop', k, e]};\n\n# to be extended\npropName <- STRING                     ${str => {\n    const js = JSON.parse(str);\n    if (js === '__proto__') {\n      // Don't allow __proto__ behaviour attacks.\n      return FAIL;\n    }\n    return ['data', js];\n  }};\n\n# to be overridden\nassignExpr <- primaryExpr;\n\n# Lexical syntax\n\n_EOF <- ~.;\nLEFT_BRACKET <- \"[\" _WS;\nRIGHT_BRACKET <- \"]\" _WS;\nLEFT_BRACE <- \"{\" _WS;\nRIGHT_BRACE <- \"}\" _WS;\n_COMMA <- \",\" _WS                     ${_ => SKIP};\nCOLON <- \":\" _WS;\nMINUS <- \"-\" _WS;\nHOLE <- &${HOLE} _WS;\n\nSTRING <- < '\"' (~'\"' character)* '\"' > _WS;\n\nutf8 <-\n  [\\xc2-\\xdf] utf8cont\n/ [\\xe0-\\xef] utf8cont utf8cont\n/ [\\xf0-\\xf4] utf8cont utf8cont utf8cont;\n\nutf8cont <- [\\x80-\\xbf];\n\ncharacter <-\n  escape\n/ '\\\\u' hex hex hex hex\n/ ~'\\\\' ([\\x20-\\x7f] / utf8);\n\nescape <- '\\\\' ['\"\\\\bfnrt];\nhex <- digit / [a-fA-F];\n\nNUMBER <- < int frac? exp? > _WSN;\n\nint <- [1-9] digit+\n/ digit\n/ MINUS digit\n/ MINUS [1-9] digit+;\n\ndigit <- [0-9];\n\nfrac <- '.' digit+;\nexp <- [Ee] [+\\-]? digit+;\n\n# _WSN is whitespace or a non-ident character.\n_WSN <- ~[$A-Za-z_] _WS    ${_ => SKIP};\n_WS <- [\\t\\n\\r ]*          ${_ => SKIP};\n`;\n\n});\n\nexport default immunize(makeJSON);","// DO NOT EDIT - Generated automatically from quasi-utils.mjs.ts by tessc\nexport const qunpack = immunize((h, ms, t) => {\n  return [h, ...ms, t];\n});\n\nexport const qrepack = immunize(parts => {\n  // TODO bug: We only provide the raw form at this time. I\n  // apologize once again for allowing a cooked form into the\n  // standard.\n  const raw = [parts[0]];\n  const argExprs = [];\n  const len = parts.length;\n  for (let i = 1; i < len; i += 2) {\n    argExprs.push(parts[i]);\n    raw.push(parts[i + 1]);\n  }\n  const template = [...raw];\n  template.raw = raw;\n  return [['data', template], ...argExprs];\n});\n\nexport const reduceElisions = immunize(es => {\n  const reduced = [];\n  for (const e of es) {\n    if (e[0] === undefined) {\n      // Push the elisions.\n      e.forEach(_ => reduced.push(undefined));\n    } else {\n      // Push the individual expression.\n      reduced.push(e);\n    }\n  }\n  return reduced;\n});","// DO NOT EDIT - Generated automatically from quasi-justin.mjs.ts by tessc\n// Subsets of JavaScript, starting from the grammar as defined at\n// http://www.ecma-international.org/ecma-262/9.0/#sec-grammar-summary\n\n// Justin is the safe JavaScript expression language, a potentially\n// pure decidable superset of JSON and subset of Jessie, that relieves\n// many of the pain points of using JSON as a data format:\n//   * unquoted indentifier property names.\n//   * comments.\n//   * multi-line strings (via template literals).\n//   * undefined.\n//   * includes all floating point values: NaN, Infinity, -Infinity\n//   * will include BigInt once available.\n\n// Justin also includes most pure JavaScript expressions. Justin does not\n// include function expressions or variable or function\n// definitions. However, it does include free variable uses and\n// function calls; so the purity and decidability of Justin depends on\n// the endowments provided for these free variable bindings.\n\n// Justin is defined to be extended into the Jessie grammar, which is\n// defined to be extended into the JavaScript grammar.\n// See https://github.com/Agoric/Jessie/blob/master/README.md\n// for documentation of the Jessie grammar.\n\n// Justin is defined to be extended into the Chainmail grammar, to\n// provide its expression language in a JS-like style. Chainmail\n// expressions need to be pure and should be decidable.\n\n/// <reference path=\"peg.d.ts\"/>\n\nimport { qunpack as $i_qunpack } from './quasi-utils.mjs';const qunpack = immunize($i_qunpack);\n\nconst binary = immunize((left, rights) => {\n  return rights.reduce((prev, [op, right]) => [op, prev, right], left);\n});\n\nconst transformSingleQuote = immunize(s => {\n  let i = 0,qs = '';\n  while (i < s.length) {\n    const c = s.slice(i, i + 1);\n    if (c === '\\\\') {\n      // Skip one char.\n      qs += s.slice(i, i + 2);\n      i += 2;\n    } else if (c === '\"') {\n      // Quote it.\n      qs += '\\\\\"';\n      i++;\n    } else {\n      // Add it directly.\n      qs += c;\n      i++;\n    }\n  }\n  return `\"${qs}\"`;\n});\n\nconst makeJustin = immunize(peg => {\n  const { SKIP } = peg;\n  return peg`\n    # to be overridden or inherited\n    start <- _WS assignExpr _EOF                       ${v => (..._a) => v};\n\n    # A.1 Lexical Grammar\n\n    DOT <- \".\" _WS;\n    ELLIPSIS <- \"...\" _WS;\n    LEFT_PAREN <- \"(\" _WS;\n    PLUS <- \"+\" _WS;\n    QUESTION <- \"?\" _WS;\n    RIGHT_PAREN <- \")\" _WS;\n    STARSTAR <- \"**\" _WS;\n\n    # Define Javascript-style comments.\n    _WS <- super._WS (EOL_COMMENT / MULTILINE_COMMENT)?   ${_ => SKIP};\n    EOL_COMMENT <- \"//\" (~[\\n\\r] .)* _WS;\n    MULTILINE_COMMENT <- \"/*\" (~\"*/\" .)* \"*/\" _WS;\n\n    # Add single-quoted strings.\n    STRING <-\n      super.STRING\n    / \"'\" < (~\"'\" character)* > \"'\" _WS  ${s => transformSingleQuote(s)};\n\n    # Only match if whitespace doesn't contain newline\n    _NO_NEWLINE <- ~IDENT [ \\t]*     ${_ => SKIP};\n\n    IDENT_NAME <- ~\"__proto__\" (IDENT / RESERVED_WORD);\n\n    IDENT <- < ~IMPORT_PFX [$A-Za-z_] [$A-Za-z0-9_]* > _WS;\n    IMPORT_PFX <- \"$i_\";\n\n    # Omit \"async\", \"arguments\", \"eval\", \"get\", and \"set\" from IDENT\n    # in Justin even though ES2017 considers them in IDENT.\n    RESERVED_WORD <-\n      (KEYWORD / RESERVED_KEYWORD / FUTURE_RESERVED_WORD\n    / \"null\" / \"false\" / \"true\"\n    / \"async\" / \"arguments\" / \"eval\" / \"get\" / \"set\") _WSN;\n\n    KEYWORD <-\n      (\"break\"\n    / \"case\" / \"catch\" / \"const\" / \"continue\"\n    / \"debugger\" / \"default\"\n    / \"else\" / \"export\"\n    / \"finally\" / \"for\" / \"function\"\n    / \"if\" / \"import\"\n    / \"return\"\n    / \"switch\"\n    / \"throw\" / \"try\" / \"typeof\"\n    / \"void\"\n    / \"while\") _WSN;\n\n    # Unused by Justin but enumerated here, in order to omit them\n    # from the IDENT token.\n    RESERVED_KEYWORD <-\n      (\"class\"\n    / \"delete\" / \"do\"\n    / \"extends\"\n    / \"in\" / \"instanceof\"\n    / \"new\"\n    / \"super\"\n    / \"this\"\n    / \"var\"\n    / \"with\"\n    / \"yield\") _WSN;\n\n    FUTURE_RESERVED_WORD <-\n      (\"await\" / \"enum\"\n    / \"implements\" / \"package\" / \"protected\"\n    / \"interface\" / \"private\" / \"public\") _WSN;\n\n    # Quasiliterals aka template literals\n    QUASI_CHAR <- \"\\\\\" . / ~\"\\`\" .;\n    QUASI_ALL <- \"\\`\" < (~\"\\${\" QUASI_CHAR)* > \"\\`\" _WS;\n    QUASI_HEAD <- \"\\`\" < (~\"\\${\" QUASI_CHAR)* > \"\\${\" _WS;\n    QUASI_MID <- \"}\" < (~\"\\${\" QUASI_CHAR)* > \"\\${\" _WS;\n    QUASI_TAIL <- \"}\" < (~\"\\${\" QUASI_CHAR)* > \"\\`\" _WS;\n\n\n    # A.2 Expressions\n\n    dataStructure <-\n      \"undefined\" _WSN     ${_ => ['data', undefined]}\n    / super.dataStructure;\n\n    # Optional trailing commas.\n    record <-\n      super.record\n    / LEFT_BRACE propDef ** _COMMA _COMMA? RIGHT_BRACE      ${(_, ps, _2) => ['record', ps]};\n\n    array <-\n      super.array\n    / LEFT_BRACKET element ** _COMMA _COMMA? RIGHT_BRACKET  ${(_, es, _2) => ['array', es]};\n\n    useVar <- IDENT                                       ${id => ['use', id]};\n\n    # Justin does not contain variable definitions, only uses. However,\n    # multiple languages that extend Justin will contain defining\n    # occurrences of variable names, so we put the defVar production\n    # here.\n    defVar <- IDENT                                       ${id => ['def', id]};\n\n\n    primaryExpr <-\n      super.primaryExpr\n    / quasiExpr\n    / LEFT_PAREN expr RIGHT_PAREN                         ${(_, e, _2) => e}\n    / useVar;\n\n    pureExpr <-\n      super.pureExpr\n    / LEFT_PAREN pureExpr RIGHT_PAREN                     ${(_, e, _2) => e}\n    / useVar;\n\n    element <-\n      super.element\n    / ELLIPSIS assignExpr                                 ${(_, e) => ['spread', e]};\n\n    propDef <-\n      super.propDef\n    / useVar                                              ${u => ['prop', u[1], u]}\n    / ELLIPSIS assignExpr                                 ${(_, e) => ['spreadObj', e]};\n\n    purePropDef <-\n      super.purePropDef\n    / useVar                                              ${u => ['prop', u[1], u]}\n    / ELLIPSIS assignExpr                                 ${(_, e) => ['spreadObj', e]};\n\n    # No computed property name\n    propName <-\n      super.propName\n    / IDENT_NAME\n    / NUMBER;\n\n    quasiExpr <-\n      QUASI_ALL                                            ${q => ['quasi', [q]]}\n    / QUASI_HEAD expr ** QUASI_MID QUASI_TAIL              ${(h, ms, t) => ['quasi', qunpack(h, ms, t)]};\n\n    # to be extended\n    memberPostOp <-\n      LEFT_BRACKET indexExpr RIGHT_BRACKET                 ${(_, e, _3) => ['index', e]}\n    / DOT IDENT_NAME                                       ${(_, id) => ['get', id]}\n    / quasiExpr                                            ${q => ['tag', q]};\n\n    # to be extended\n    callPostOp <-\n      memberPostOp\n    / args                                                 ${args => ['call', args]};\n\n    # Because Justin and Jessie have no \"new\" or \"super\", they don't need\n    # to distinguish callExpr from memberExpr. So justin omits memberExpr\n    # and newExpr. Instead, in Justin, callExpr jumps directly to\n    # primaryExpr and updateExpr jumps directly to callExpr.\n\n    # to be overridden.\n    callExpr <- primaryExpr callPostOp*                   ${binary};\n\n    # To be overridden rather than inherited.\n    # Introduced to impose a non-JS restriction\n    # Restrict index access to number-names, including\n    # floating point, NaN, Infinity, and -Infinity.\n    indexExpr <-\n      NUMBER                                               ${n => ['data', JSON.parse(n)]}\n    / PLUS unaryExpr                                       ${(_, e) => [`pre:+`, e]};\n\n    args <- LEFT_PAREN arg ** _COMMA RIGHT_PAREN            ${(_, args, _2) => args};\n\n    arg <-\n      assignExpr\n    / ELLIPSIS assignExpr                                  ${(_, e) => ['spread', e]};\n\n    # to be overridden\n    updateExpr <- callExpr;\n\n    unaryExpr <-\n      preOp unaryExpr                                      ${(op, e) => [op, e]}\n    / updateExpr;\n\n    # to be extended\n    # No prefix or postfix \"++\" or \"--\".\n    # No \"delete\".\n    preOp <- ((\"void\" / \"typeof\") _WSN / prePre);\n    prePre <- (\"+\" / \"-\" / \"~\" / \"!\") _WS                 ${op => `pre:${op}`};\n\n    # Different communities will think -x**y parses in different ways,\n    # so the EcmaScript grammar forces parens to disambiguate.\n    powExpr <-\n      updateExpr STARSTAR powExpr                          ${(x, op, y) => [op, x, y]}\n    / unaryExpr;\n\n    multExpr <- powExpr (multOp powExpr)*                  ${binary};\n    addExpr <- multExpr (addOp multExpr)*                  ${binary};\n    shiftExpr <- addExpr (shiftOp addExpr)*                ${binary};\n\n    # Non-standard, to be overridden\n    # In C-like languages, the precedence and associativity of the\n    # relational, equality, and bitwise operators is surprising, and\n    # therefore hazardous. Here, none of these associate with the\n    # others, forcing parens to disambiguate.\n    eagerExpr <- shiftExpr (eagerOp shiftExpr)?            ${binary};\n\n    andThenExpr <- eagerExpr (andThenOp eagerExpr)*       ${binary};\n    orElseExpr <- andThenExpr (orElseOp andThenExpr)*     ${binary};\n\n    multOp <- (\"*\" / \"/\" / \"%\") _WS;\n    addOp <- (\"+\" / \"-\") _WS;\n    shiftOp <- (\"<<\" / \">>>\" / \">>\") _WS;\n    relOp <- (\"<=\" / \"<\" / \">=\" / \">\") _WS;\n    eqOp <- (\"===\" / \"!==\") _WS;\n    bitOp <- (\"&\" / \"^\" / \"|\") _WS;\n\n    eagerOp <- relOp / eqOp / bitOp;\n\n    andThenOp <- \"&&\" _WS;\n    orElseOp <- \"||\" _WS;\n\n    condExpr <-\n      orElseExpr QUESTION assignExpr COLON assignExpr   ${(c, _, t, _2, e) => ['cond', c, t, e]}\n    / orElseExpr;\n\n    # override, to be extended\n    assignExpr <- condExpr;\n\n    # The comma expression is not in Jessie because we\n    # opt to pass only immunized expressions as the this-binding.\n    expr <- assignExpr;\n  `;\n});\n\nexport default immunize(makeJustin);","// DO NOT EDIT - Generated automatically from tag-string.mjs.ts by tessc\n/// <reference path=\"./peg.d.ts\"/>\nconst tagString = immunize((tag, uri) => {\n\n\n  function tagged(templateOrFlag, ...args)\n  {\n    if (typeof templateOrFlag === 'string') {\n      return tagString(tag(templateOrFlag), uri);\n    }\n    const template = templateOrFlag;\n    const cooked = template.reduce((prior, t, i) => {\n      prior.push(t, String(args[i]));\n      return prior;\n    }, []);\n    cooked.push(template[template.length - 1]);\n    const cooked0 = cooked.join('');\n    const raw0 = args.reduce((prior, hole, i) => {\n      prior.push(String(hole), template.raw[i + 1]);\n      return prior;\n    }, [template.raw[0]]).join('');\n    const sources0 = {\n      byte: 0,\n      column: 1,\n      line: 1,\n      uri };\n\n    const tmpl = [cooked0];\n    tmpl.raw = [raw0];\n    tmpl.sources = [sources0];\n    return tag(tmpl);\n  }\n  tagged.parserCreator = tag.parserCreator;\n  tagged._asExtending = tag._asExtending;\n  return tagged;\n});\n\nexport default immunize(tagString);","// DO NOT EDIT - Generated automatically from index.mjs.ts by tessc\nimport $i_bootPeg from './boot-peg.mjs';const bootPeg = immunize($i_bootPeg);\nimport $i_bootPegAst from './boot-pegast.mjs';const bootPegAst = immunize($i_bootPegAst);\nimport $i_makePeg from './quasi-peg.mjs';const makePeg = immunize($i_makePeg);\n\nimport $i_makeJessie from './quasi-jessie.mjs';const makeJessie = immunize($i_makeJessie);\nimport $i_makeJSON from './quasi-json.mjs';const makeJSON = immunize($i_makeJSON);\nimport $i_makeJustin from './quasi-justin.mjs';const makeJustin = immunize($i_makeJustin);\n\nimport $i_tagString from './tag-string.mjs';const tagString = immunize($i_tagString);\n\nconst pegTag = immunize(bootPeg(makePeg, bootPegAst));\nconst jsonTag = immunize(makeJSON(pegTag));\nconst justinTag = immunize(makeJustin(pegTag.extends(jsonTag)));\nconst [jessieTag] = immunize(makeJessie(pegTag, pegTag.extends(justinTag)));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const translate = immunize((sourceText, parameters) =>\n\nmakePromise(resolve => {\n  const tag = tagString(jessieTag, parameters.sourceURL);\n  // Throw an exception if the sourceText doesn't parse.\n  tag`${sourceText}`;\n  // For now, return the source text verbatim.\n  const result = {\n    ...parameters,\n    translatedText: sourceText };\n\n  resolve(result);\n}));","import '../nodejs/globalEnv.mjs';\nexport * from '../../lib/index.mjs';\n"]}